const $=e=>document.querySelector(e),$$=e=>document.querySelectorAll(e),formatCurrency=e=>(("number"!=typeof e||isNaN(e))&&(e=0),`LKR ${e.toFixed(2).replace(/\d(?=(\d{3})+\.)/g,"$&,")}`),generateId=()=>"_"+Math.random().toString(36).substr(2,9),getDaysLeft=e=>{let t=new Date;t.setHours(0,0,0,0);let a=new Date(e);return a.setHours(0,0,0,0),Math.ceil((a-t)/864e5)};function getCurrentDateString(){let e=new Date,t=e.getFullYear(),a=String(e.getMonth()+1).padStart(2,"0"),n=String(e.getDate()).padStart(2,"0");return`${t}-${a}-${n}`}function getFormattedLocalStorageSize(e){let t=localStorage.getItem(e);if(null===t)return"N/A (No data found)";let a=t.length;return a<1024?`${a} Bytes`:a<1048576?`${(a/1024).toFixed(2)} KB`:`${(a/1048576).toFixed(2)} MB`}function displayAppVersion(){let e="N/A";try{let t=document.querySelector('meta[name="application-version"]');t?e=t.getAttribute("content"):console.warn("Application version meta tag not found.")}catch(a){console.error("Error reading application version:",a)}let n=document.getElementById("appVersionSettings");n&&(n.textContent=`Version: ${e}`);let o=document.getElementById("appVersionSetup");o&&(o.textContent=`Version: ${e}`)}function toggleCategoryVisibilityInModal(e,t,a){let n=document.getElementById(t),o=document.getElementById(a),i=e.form.elements.description||e.form.elements.modalDescription||e.form.elements.ccDescription||e.form.elements.modalCcDescription;"income"===e.value?(n&&(n.style.display="none"),o&&(o.required=!1),i&&(i.placeholder="e.g., Monthly Salary")):(n&&(n.style.display="block"),o&&(o.required=!0),i&&(i.placeholder="e.g., Lunch, Groceries"))}let state={};function getDefaultState(){return JSON.parse(JSON.stringify({transactions:[],accounts:[{id:"cash",name:"Cash",balance:0},{id:"bank_1",name:"Commercial",balance:0},{id:"bank_2",name:"HNB",balance:0},{id:"bank_3",name:"Genie",balance:0},],categories:["Food & Dining","Groceries","Transportation","Healthcare","Personal Care","Shopping","Entertainment","Education","Gifts & Donations","Travel","Subscriptions & Memberships","Bank Charges","Other",].sort((e,t)=>e.localeCompare(t)),debts:[],receivables:[],installments:[],creditCard:{limit:0,transactions:[]},settings:{initialSetupDone:!1,showCcDashboardSection:!0,theme:"dark"}}))}function openInitialSetupWizard(){let e=$("#initialSetupModal");if(!e){console.error("Initial Setup Modal not found in HTML.");return}console.log("Opening Initial Setup Wizard...");let t=$("#setupAccountBalances");t.innerHTML="";let a=getDefaultState().accounts;a.forEach(e=>{let a=document.createElement("div");a.className="grid grid-cols-1 sm:grid-cols-[2fr,3fr] gap-x-3 items-center mb-2";let n,o='style="background-color: var(--bg-secondary); border-color: var(--border-color); color: var(--text-primary);"';n="cash"===e.id?`<label for="setupBalance-${e.id}" class="text-sm font-medium text-gray-300 justify-self-start col-span-1 sm:col-span-1">${e.name}</label>`:`<input type="text" id="setupName-${e.id}" name="setupName-${e.id}" value="${e.name}" data-account-id="${e.id}" class="!py-1.5 !px-2 text-sm w-full rounded placeholder-gray-400 col-span-1 sm:col-span-1" ${o} placeholder="Account Name">`;let i=`<input type="number" id="setupBalance-${e.id}" name="setupBalance-${e.id}" data-account-id="${e.id}" step="0.01" placeholder="0.00 (Optional)" class="!py-1.5 !px-2 text-sm w-full rounded placeholder-gray-400 col-span-1 sm:col-span-1" ${o}>`;"cash"===e.id?a.innerHTML=`${n}<div class="sm:col-span-1"> ${i}</div>`:a.innerHTML=`<div class="col-span-1 sm:col-span-1">${n}</div><div class="col-span-1 sm:col-span-1 mt-1 sm:mt-0">${i}</div>`,t.appendChild(a)});let n=$("#setupEnableCc"),o=$("#setupCcLimitGroup"),i=$("#setupCcLimit");n&&o&&i&&(n.checked=!0,o.style.display="block",i.required=!0,i.style.backgroundColor="var(--bg-secondary)",i.style.borderColor="var(--border-color)",i.style.color="var(--text-primary)",n.onchange=()=>{n.checked?(o.style.display="block",i.required=!0):(o.style.display="none",i.required=!1,i.value="")});let r=$("#setupCategoriesList"),s=$("#setupNewCategoryName"),l=$("#setupAddCategoryBtn"),c=[...getDefaultState().categories];s&&(s.style.backgroundColor="var(--bg-secondary)",s.style.borderColor="var(--border-color)",s.style.color="var(--text-primary)");let d=()=>{r&&(r.innerHTML="",c.sort((e,t)=>e.localeCompare(t)).forEach(e=>{let t=document.createElement("div");t.className="flex justify-between items-center p-2 rounded text-sm",t.style.backgroundColor="var(--bg-secondary)",t.style.borderColor="var(--border-color)",t.style.borderWidth="1px",t.innerHTML=`
              <span>${e}</span>
              <button type="button" class="text-red-400 hover:text-red-300 text-xs ml-2" data-category-name="${e}" title="Remove">
                  <i class="fas fa-times"></i>
              </button>
          `,t.querySelector("button").onclick=e=>{let t=e.currentTarget.dataset.categoryName;c=c.filter(e=>e!==t),d()},r.appendChild(t)}))};l&&(l.onclick=()=>{let e=s.value.trim();e&&!c.some(t=>t.toLowerCase()===e.toLowerCase())?(c.push(e),d(),s.value=""):e&&showNotification(`Category "${e}" already exists.`,"warning"),s.focus()}),s&&(s.onkeypress=e=>{"Enter"===e.key&&(e.preventDefault(),l&&l.click())}),d(),$("#initialSetupForm").onsubmit=handleInitialSetupSubmit,$("#setupImportInput").onchange=handleSetupImport,e.style.display="block",displayAppVersion()}function handleInitialSetupSubmit(e){e.preventDefault(),console.log("Handling initial setup form submission...");let t=getDefaultState(),a=getDefaultState().accounts;t.accounts=a.map(e=>{let t=$(`#setupName-${e.id}`),a=$(`#setupBalance-${e.id}`),n=e.name;if("cash"!==e.id&&t){let o=t.value.trim();o?n=o:console.warn(`Account name for ${e.id} was left empty, using default: ${e.name}`)}let i=0;if(a){let r=a.value.trim();if(""!==r&&null!==r){let s=parseFloat(r);i=isNaN(s)?0:s}}return{id:e.id,name:n,balance:i}});let n=$("#setupEnableCc").checked;if(t.settings.showCcDashboardSection=n,n){let o=$("#setupCcLimit").value.trim();if(""===o||null===o)t.creditCard.limit=0;else{let i=parseFloat(o);t.creditCard.limit=isNaN(i)||i<0?0:i}}else t.creditCard.limit=0;let r=[];$$("#setupCategoriesList span").forEach(e=>r.push(e.textContent)),t.categories=r.length>0?r.sort((e,t)=>e.localeCompare(t)):getDefaultState().categories,t.settings.initialSetupDone=!0,state=t,saveData(),closeModal("initialSetupModal"),initializeUI(!0),showNotification("Setup complete! Welcome to Kaasi.","success",5e3)}function handleSetupImport(e){let t=e.target.files[0];if(!t)return;console.log("Importing data from setup wizard...");let a=new FileReader;a.onload=t=>{let a;try{if((a=JSON.parse(t.target.result))&&"object"==typeof a)state=getDefaultState(),(state=deepMerge(state,a)).settings||(state.settings=getDefaultState().settings),state.settings.initialSetupDone=!0,saveData(),closeModal("initialSetupModal"),initializeUI(!0),showNotification("Data imported successfully from setup wizard!","success");else throw Error("Invalid data structure in imported file.")}catch(n){console.error("Import failed during setup:",n),showNotification(`Import failed: ${n.message}. Please try manual setup or a valid file.`,"error",1e4)}finally{e.target.value=null}},a.onerror=()=>{showNotification("Failed to read the import file.","error"),e.target.value=null},a.readAsText(t)}const STORAGE_KEY="KaasiData";function saveData(){try{localStorage.setItem(STORAGE_KEY,JSON.stringify(state)),console.log("Data saved successfully.")}catch(e){console.error("Error saving data to localStorage:",e),"QuotaExceededError"===e.name?showNotification("Error: Local storage quota exceeded. Data is too large to save.","error",1e4):showNotification("Error saving data. Check console.","error",1e4)}}function loadData(){let e=localStorage.getItem(STORAGE_KEY),t=null;if(e){console.log("Uncompressed data found. Attempting to parse...");try{t=JSON.parse(e)}catch(a){console.error("Error parsing data from localStorage:",a),showNotification("Error loading data. Data might be corrupted. Starting fresh.","error",8e3)}}state=getDefaultState(),t&&"object"==typeof t?(console.log("Merging loaded data into default state structure..."),state=deepMerge(state,t),console.log("Data merged successfully.")):e&&!t?console.log("Previous data existed but was unparsable. Using fresh default state."):console.log("No saved data found or data was null/invalid. Starting with fresh default state.");let n=getDefaultState();if(state.settings&&"object"==typeof state.settings)for(let o in n.settings)void 0===state.settings[o]&&(state.settings[o]=n.settings[o]);else console.warn("State.settings was missing or invalid after merge. Resetting to default settings structure."),state.settings={...n.settings};if(state.creditCard&&"object"==typeof state.creditCard){for(let i in n.creditCard)void 0===state.creditCard[i]&&(state.creditCard[i]=n.creditCard[i]);Array.isArray(state.creditCard.transactions)||(state.creditCard.transactions=[])}else console.warn("State.creditCard was missing or invalid after merge. Resetting to default creditCard structure."),state.creditCard={...n.creditCard},Array.isArray(state.creditCard.transactions)||(state.creditCard.transactions=[]);Array.isArray(state.transactions)||(state.transactions=[]),Array.isArray(state.accounts)||(state.accounts=[]),Array.isArray(state.categories)||(state.categories=[]),Array.isArray(state.debts)||(state.debts=[]),Array.isArray(state.receivables)||(state.receivables=[]),Array.isArray(state.installments)||(state.installments=[]),ensureDefaultAccounts(),ensureDefaultCategories(),state.accounts.forEach(e=>{(isNaN(e.balance)||"number"!=typeof e.balance)&&(e.balance=0)}),(isNaN(state.creditCard.limit)||"number"!=typeof state.creditCard.limit)&&(state.creditCard.limit=0),state.creditCard.transactions.forEach(e=>{(void 0===e.paidAmount||"number"!=typeof e.paidAmount)&&(e.paidAmount=0),void 0===e.paidOff&&(e.paidOff=e.paidAmount>=e.amount-.005),e.timestamp||(e.timestamp=new Date(e.date).getTime())}),state.transactions.forEach(e=>{e.timestamp||(e.timestamp=new Date(e.date).getTime())}),state.debts.forEach(e=>{e.timestamp||(e.timestamp=new Date(e.dueDate).getTime()),void 0===e.originalAmount&&(e.originalAmount=e.amount)}),state.receivables.forEach(e=>{e.timestamp||(e.timestamp=new Date(e.dateGiven).getTime()),void 0===e.originalAmount&&(e.originalAmount=e.amount)}),state.installments.forEach(e=>{e.timestamp||(e.timestamp=new Date(e.startDate).getTime())}),console.log("Final state after loadData and integrity checks:",JSON.parse(JSON.stringify(state)))}function deepMerge(e,t){for(let a in t)if(t.hasOwnProperty(a)){let n=t[a],o=e[a];n&&"object"==typeof n&&!Array.isArray(n)?((!o||"object"!=typeof o||Array.isArray(o))&&(e[a]={}),deepMerge(e[a],n)):void 0!==n&&(e[a]=n)}return e}function ensureDefaultAccounts(){let e=getDefaultState().accounts;if(!Array.isArray(state.accounts)){console.warn("state.accounts was not an array. Resetting to default accounts structure."),state.accounts=JSON.parse(JSON.stringify(e)),state.accounts.forEach(e=>e.balance=0);return}e.forEach(e=>{let t=state.accounts.find(t=>t.id===e.id);t?("string"!=typeof t.name&&(t.name=e.name),("number"!=typeof t.balance||isNaN(t.balance))&&(console.warn(`Balance for account '${t.name}' was invalid. Resetting to 0.`),t.balance=0)):(console.warn(`Default account '${e.name}' (ID: ${e.id}) was missing. Adding it.`),state.accounts.push({...e,balance:0}))})}function ensureDefaultCategories(){let e=getDefaultState().categories;state.categories&&Array.isArray(state.categories)||(console.warn("state.categories was missing or not an array. Initializing as empty array."),state.categories=[]),0===state.categories.length&&(console.warn("state.categories is empty. Populating with default categories."),state.categories=JSON.parse(JSON.stringify(e))),state.categories.sort((e,t)=>e.localeCompare(t));let t="Other";state.categories.some(e=>e.toLowerCase()===t.toLowerCase())||(console.warn("'Other' category was missing. Adding it back."),state.categories.push(t),state.categories.sort((e,t)=>e.localeCompare(t)))}function showNotification(e,t="success",a=4e3){let n=$("#notificationArea");if(!n)return;let o=document.createElement("div"),i,r;switch(t){case"error":i="bg-red-600",r="text-white";break;case"warning":i="bg-yellow-500",r="text-black";break;case"info":i="bg-blue-500",r="text-white";break;default:i="bg-green-600",r="text-white"}o.className=`p-3 rounded-md shadow-lg text-sm font-medium transition-all duration-300 ease-in-out transform translate-x-full opacity-0 ${i} ${r}`,o.textContent=e,n.appendChild(o),o.offsetWidth,requestAnimationFrame(()=>{o.classList.remove("translate-x-full","opacity-0"),o.classList.add("translate-x-0","opacity-100")}),setTimeout(()=>{o.classList.remove("translate-x-0","opacity-100"),o.classList.add("translate-x-full","opacity-0"),o.addEventListener("transitionend",()=>o.remove(),{once:!0})},a)}function populateDropdowns(){let e=$$('select[name="account"], select[name="transferFrom"], select[name="transferTo"], select[name="receivableSourceAccount"], select[name="payDebtAccount"], select[name="recPaymentAccount"], select[name="instPayAccount"], select[name="ccPayFromAccount"], #modalAccount, #recSourceAccountAdd, #recSourceAccountEdit, #modalCcPayFromAccount, #modalInstPayAccount, #modalPayDebtAccount'),t=$$("#category, #modalCategory, #modalPayDebtCategory, #modalInstPayCategory, #modalCcPayCategory");e.forEach(e=>{if(!e)return;let t=e.value;e.innerHTML="",state.accounts.forEach(t=>{let a=document.createElement("option");a.value=t.id,a.textContent=`${t.name} (${formatCurrency(t.balance)})`,e.appendChild(a)}),Array.from(e.options).some(e=>e.value===t)?e.value=t:e.options.length});let a=e=>{if(!e)return;let t=e.value;e.innerHTML="";let a=document.createElement("option");a.value="",a.textContent="---- Select Category ----",a.disabled=!0,e.appendChild(a);let n="Other",o=state.categories.filter(e=>"income"!==e.toLowerCase()&&"credit card payment"!==e.toLowerCase()&&e.toLowerCase()!==n.toLowerCase());if(o.sort((e,t)=>e.localeCompare(t)),"modalPayDebtCategory"===e.id){let i="Debt Repayment";o.includes(i)||state.categories.some(e=>e.toLowerCase()===i.toLowerCase())}if(o.forEach(t=>{let a=document.createElement("option");a.value=t,a.textContent=t,e.appendChild(a)}),state.categories.some(e=>e.toLowerCase()===n.toLowerCase())){let r=document.createElement("option");r.value=n,r.textContent=n,e.appendChild(r)}t&&Array.from(e.options).some(e=>e.value===t&&""!==e.value)?e.value=t:"modalPayDebtCategory"===e.id&&state.categories.includes("Debt Repayment")?e.value="Debt Repayment":e.value=""};t.forEach(a)}function renderDashboard(){let e=0;state.accounts.forEach(t=>{let a=$(`#accountBalance-${t.id}`);if(a){let n=a.querySelector("p:first-child"),o=a.querySelector("p:last-child");n&&(n.textContent=t.name),o&&(o.textContent=formatCurrency(t.balance))}e+=t.balance}),$("#totalBalance").textContent=formatCurrency(e);let t=state.receivables.filter(e=>"cash"===e.type||"cc"===e.type&&e.sourceAccount).reduce((e,t)=>e+t.remainingAmount,0);$("#totalPotentialBalance").textContent=formatCurrency(e+t),$("#totalOwedToMe").textContent=`Total: ${formatCurrency(state.receivables.reduce((e,t)=>e+t.remainingAmount,0))}`,$("#totalOwed").textContent=`Total: ${formatCurrency(state.debts.reduce((e,t)=>e+t.remainingAmount,0))}`,$("#totalInstallmentsLeft").textContent=`Total Left: ${formatCurrency(state.installments.reduce((e,t)=>e+t.monthlyAmount*t.monthsLeft,0))}`,renderRecentTransactions(),renderDebtList(),renderReceivableList(),renderInstallmentList(),renderCreditCardSection(),renderMonthlyOverviewChart(),renderYearlyAndQuickStats()}function renderYearlyAndQuickStats(){let e=new Date,t=e.getFullYear(),a=new Date(t,0,1),n=new Date(e);n.setDate(e.getDate()-e.getDay()+(0===e.getDay()?-6:1)),n.setHours(0,0,0,0);let o=new Date(e);o.setHours(0,0,0,0);let i=new Date(o);i.setDate(o.getDate()-1);let r=new Date(n);r.setDate(n.getDate()-7);let s=new Date(n);s.setDate(n.getDate()-1),s.setHours(23,59,59,999);let l=0,c=0,d=0,u=0,m=0,p=0;state.transactions.forEach(e=>{let t=new Date(e.date);!isNaN(t.getTime())&&(t>=a&&("income"===e.type&&(l+=e.amount),"expense"===e.type&&(c+=e.amount)),"expense"===e.type&&(t>=n&&(d+=e.amount),t>=o&&(u+=e.amount),t>=i&&t<o&&(m+=e.amount),t>=r&&t<=s&&(p+=e.amount)))}),$("#yearlyTotals").textContent=`Yearly: Earned ${formatCurrency(l)} / Spent ${formatCurrency(c)}`;let f=$("#quickStats");f.innerHTML=`Today: ${formatCurrency(u)} <span id="todaySpendingIndicator"></span> | This Week: ${formatCurrency(d)} <span id="weekSpendingIndicator"></span>`;let g=$("#todaySpendingIndicator");u>m&&m>=0?g.innerHTML=`<i class="fas fa-arrow-up text-indicator-bad spending-indicator" title="More than yesterday (${formatCurrency(m)})"></i>`:u<m&&m>0?g.innerHTML=`<i class="fas fa-arrow-down text-indicator-good spending-indicator" title="Less than yesterday (${formatCurrency(m)})"></i>`:g.innerHTML="";let b=$("#weekSpendingIndicator");d>p&&p>=0?b.innerHTML=`<i class="fas fa-arrow-up text-indicator-bad spending-indicator" title="More than last week (${formatCurrency(p)})"></i>`:d<p&&p>0?b.innerHTML=`<i class="fas fa-arrow-down text-indicator-good spending-indicator" title="Less than last week (${formatCurrency(p)})"></i>`:b.innerHTML=""}function renderRecentTransactions(){let e=$("#recentTransactionsList");if(!e)return;e.innerHTML="";let t=[...state.transactions].sort((e,t)=>new Date(t.date).setHours(0,0,0,0)-new Date(e.date).setHours(0,0,0,0)||t.timestamp-e.timestamp).slice(0,10);if(0===t.length){e.innerHTML='<p class="text-gray-400 text-sm">No transactions yet.</p>';return}t.forEach(t=>{let a=document.createElement("div");a.className="flex justify-between items-center p-2 rounded bg-gray-700/50 text-sm transition-colors hover:bg-gray-700/80";let n=state.accounts.find(e=>e.id===t.account),o=n?n.name:"Unknown",i="income"===t.type,r=i?"text-income":"text-expense",s=i?"":`(${t.category||"Uncategorized"})`;a.innerHTML=`
                <div class="flex-grow mr-2 overflow-hidden">
                    <p class="font-medium truncate ${r}" title="${t.description}">${t.description}</p>
                    <p class="text-xs text-gray-400">${new Date(t.date).toLocaleDateString()} - ${o} ${s}</p>
                </div>
                <span class="font-semibold whitespace-nowrap ${r}">${i?"+":"-"}${formatCurrency(t.amount)}</span>
                <div class="edit-btn-container flex-shrink-0">
                    <button class="text-xs accent-text hover:text-accent-hover focus:outline-none" onclick="openEditTransactionForm('${t.id}', event)" title="Edit"><i class="fas fa-edit"></i></button>
                    <button class="text-xs text-gray-500 hover:text-expense focus:outline-none" onclick="deleteTransaction('${t.id}',event)" title="Delete"><i class="fas fa-times"></i></button>
                </div>`,e.appendChild(a)})}function renderDebtList(){let e=$("#debtList");if(!e){console.error("#debtList element not found.");return}if(e.innerHTML="",0===state.debts.length){e.innerHTML='<p class="text-gray-400 text-sm">No debts recorded.</p>';return}let t=state.debts.reduce((e,t)=>{let a=t.who.trim();return e[a]||(e[a]={totalOwedTo:0,items:[]}),e[a].totalOwedTo+=t.remainingAmount,e[a].items.push(t),e},{}),a=Object.keys(t).sort((e,t)=>e.localeCompare(t));if(0===a.length){e.innerHTML='<p class="text-gray-400 text-sm">No debts to display by creditor.</p>';return}a.forEach(a=>{let n=t[a],o=`debt-creditor-${generateId()}`,i=document.createElement("div");i.className="mb-3 border border-gray-700 rounded-md overflow-hidden";let r=document.createElement("div");r.className="flex justify-between items-center p-3 cursor-pointer hover:bg-gray-600/50 transition-colors",r.style.backgroundColor="var(--bg-tertiary)",r.onclick=()=>{let e=document.getElementById(o),t=r.querySelector(".toggle-icon i");e&&(e.classList.toggle("hidden"),e.classList.contains("hidden")?(t.classList.remove("fa-chevron-up"),t.classList.add("fa-chevron-down")):(t.classList.remove("fa-chevron-down"),t.classList.add("fa-chevron-up")))},r.innerHTML=`
          <h4 class="text-md font-semibold text-gray-100">${a}</h4>
          <div class="flex items-center">
              <span class="text-md font-semibold text-expense mr-3">${formatCurrency(n.totalOwedTo)}</span>
              <span class="toggle-icon text-gray-400"><i class="fas fa-chevron-down"></i></span>
          </div>
      `,i.appendChild(r);let s=document.createElement("div");s.id=o,s.className="hidden p-2 pt-0 space-y-2",s.style.backgroundColor="var(--bg-secondary)",n.items.sort((e,t)=>new Date(e.dueDate)-new Date(t.dueDate)).forEach(e=>{let t=getDaysLeft(e.dueDate),a,n;t<0?(a=`Overdue by ${Math.abs(t)} day(s)`,n="text-expense font-medium"):0===t?(a="Due Today",n="text-warning font-medium"):(a=`${t} day(s) left`,n="text-gray-300");let o=document.createElement("div");o.className="text-sm py-2 border-b border-gray-700 last:border-b-0",o.innerHTML=`
              <div class="flex justify-between items-start mb-1">
                  <div>
                      <p class="font-medium text-gray-200">${e.why}</p>
                      <p class="text-xs ${n}">${a}</p>
                  </div>
                  <span class="font-semibold text-expense">${formatCurrency(e.remainingAmount)}</span>
              </div>
              <div class="flex justify-between items-center text-xs text-gray-500 mt-1">
                  <span>Due: ${new Date(e.dueDate).toLocaleDateString()}</span>
                  <div class="edit-btn-container">
                      <button class="link-style text-xs mr-2 accent-text hover:text-accent-hover" onclick="openEditDebtForm('${e.id}')">Edit</button>
                      <button class="link-style text-xs mr-2 text-income hover:opacity-80" onclick="openPayDebtForm('${e.id}')">Pay</button>
                      <button class="text-gray-500 hover:text-expense text-xs focus:outline-none" onclick="deleteDebt('${e.id}')" title="Delete"><i class="fas fa-times"></i></button>
                  </div>
              </div>
          `,s.appendChild(o)}),i.appendChild(s),e.appendChild(i)})}function renderReceivableList(){let e=$("#receivableList");if(!e){console.error("#receivableList element not found.");return}if(e.innerHTML="",0===state.receivables.length){e.innerHTML='<p class="text-gray-400 text-sm">No receivables recorded.</p>';return}let t=state.receivables.reduce((e,t)=>{let a=t.who.trim();return e[a]||(e[a]={totalOwed:0,items:[]}),e[a].totalOwed+=t.remainingAmount,e[a].items.push(t),e},{}),a=Object.keys(t).sort((e,t)=>e.localeCompare(t));if(0===a.length){e.innerHTML='<p class="text-gray-400 text-sm">No receivables to display by person.</p>';return}a.forEach(a=>{let n=t[a],o=`receivable-person-${generateId()}`,i=document.createElement("div");i.className="mb-3 border border-gray-700 rounded-md overflow-hidden";let r=document.createElement("div");r.className="flex justify-between items-center p-3 cursor-pointer hover:bg-gray-600/50 transition-colors",r.style.backgroundColor="var(--bg-tertiary)",r.onclick=()=>{let e=document.getElementById(o),t=r.querySelector(".toggle-icon i");e&&(e.classList.toggle("hidden"),e.classList.contains("hidden")?(t.classList.remove("fa-chevron-up"),t.classList.add("fa-chevron-down")):(t.classList.remove("fa-chevron-down"),t.classList.add("fa-chevron-up")))},r.innerHTML=`
          <h4 class="text-md font-semibold text-gray-100">${a}</h4>
          <div class="flex items-center">
              <span class="text-md font-semibold text-income mr-3">${formatCurrency(n.totalOwed)}</span>
              <span class="toggle-icon text-gray-400"><i class="fas fa-chevron-down"></i></span>
          </div>
      `,i.appendChild(r);let s=document.createElement("div");s.id=o,s.className="hidden p-2 pt-0 space-y-2",s.style.backgroundColor="var(--bg-secondary)",n.items.sort((e,t)=>new Date(t.dateGiven)-new Date(e.dateGiven)).forEach(e=>{let t=state.accounts.find(t=>t.id===e.sourceAccount),a="cash"===e.type?`(From: ${t?.name||"Unknown"})`:"(Via CC)",n=document.createElement("div");n.className="text-sm py-2 border-b border-gray-700 last:border-b-0",n.innerHTML=`
              <div class="flex justify-between items-start mb-1">
                  <div>
                      <p class="font-medium text-gray-200">${e.why}</p>
                      <p class="text-xs text-gray-400">${a}</p>
                  </div>
                  <span class="font-semibold text-income">${formatCurrency(e.remainingAmount)}</span>
              </div>
              <div class="flex justify-between items-center text-xs text-gray-500 mt-1">
                  <span>Given: ${new Date(e.dateGiven).toLocaleDateString()}</span>
                  <div class="edit-btn-container">
                      <button class="link-style text-xs mr-2 accent-text hover:text-accent-hover" onclick="openEditReceivableForm('${e.id}')">Edit</button>
                      <button class="link-style text-xs mr-2 text-income hover:opacity-80" onclick="openReceivePaymentForm('${e.id}')">Receive</button>
                      <button class="text-gray-500 hover:text-expense text-xs focus:outline-none" onclick="deleteReceivable('${e.id}')" title="Delete"><i class="fas fa-times"></i></button>
                  </div>
              </div>
          `,s.appendChild(n)}),i.appendChild(s),e.appendChild(i)})}function renderInstallmentList(){let e=$("#installmentList");if(!e)return;e.innerHTML="";let t=[...state.installments].sort((e,t)=>{let a=new Date(e.startDate);a.setMonth(a.getMonth()+e.totalMonths);let n=new Date(t.startDate);return n.setMonth(n.getMonth()+t.totalMonths),a-n});if(0===t.length){e.innerHTML='<p class="text-gray-400 text-sm">No installments.</p>';return}t.forEach(t=>{let a=new Date(t.startDate);a.setMonth(a.getMonth()+t.totalMonths);let n=getDaysLeft(a),o=n<0?'<span class="text-gray-500">Finished</span>':`<span class="text-gray-300">${n} day(s) left</span>`,i=t.monthlyAmount*t.monthsLeft,r=t.totalMonths>0?(t.totalMonths-t.monthsLeft)/t.totalMonths*100:0,s=document.createElement("div");s.className="p-3 rounded bg-gray-700/50 text-sm mb-2 flex items-center gap-x-3";let l=`
                <div class="installment-progress-ring-container w-10 h-10 flex-shrink-0" title="${r.toFixed(0)}% Paid (${t.monthsLeft} months left)">
                    <svg class="w-full h-full" viewBox="0 0 36 36">
                        <path class="progress-ring-bg" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" fill="none" stroke-width="3"></path>
                        <path class="progress-ring-circle" stroke-dasharray="${r.toFixed(2)}, 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" fill="none" stroke-linecap="round" stroke-width="3"></path>
                        <text x="18" y="17.5" class="progress-ring-text" text-anchor="middle" fill="var(--text-primary)">${t.monthsLeft}</text> 
                    </svg>
                </div>
            `;s.innerHTML=`
                ${l}
                <div class="flex-grow">
                    <div class="flex justify-between items-start mb-1">
                        <div>
                            <p class="font-medium">${t.description}</p>
                            <p class="text-xs text-gray-400">${formatCurrency(t.monthlyAmount)} / month</p>
                        </div>
                        <span class="font-semibold text-gray-200 whitespace-nowrap">${formatCurrency(i)} Left</span> 
                    </div>
                    <div class="flex justify-between items-center text-xs text-gray-400 mt-1">
                        <span>${t.monthsLeft} of ${t.totalMonths} months left (${o})</span>
                        <div class="edit-btn-container">
                            ${t.monthsLeft>0?`<button class="link-style text-sm mr-2 accent-text hover:text-accent-hover" onclick="openEditInstallmentForm('${t.id}')">Edit</button><button class="text-income hover:opacity-80 mr-2 text-sm link-style" onclick="payInstallmentMonth('${t.id}')">Pay Month</button>`:`<button class="link-style text-sm mr-2 accent-text hover:text-accent-hover" onclick="openEditInstallmentForm('${t.id}')">Edit</button>`}
                            <button class="text-gray-500 hover:text-expense text-xs focus:outline-none" onclick="deleteInstallment('${t.id}')" title="Delete"><i class="fas fa-times"></i></button>
                        </div>
                    </div>
                </div>
            `,e.appendChild(s)})}let monthlyOverviewChartInstance=null;function renderMonthlyOverviewChart(){let e=$("#monthlyOverviewChart");if(!e)return;let t=e.getContext("2d"),a=[],n=[],o=[],i=new Date;for(let r=11;r>=0;r--){let s=new Date(i.getFullYear(),i.getMonth()-r,1),l=s.getFullYear(),c=s.getMonth();a.push(s.toLocaleString("default",{month:"short"}));let d=0,u=0;state.transactions.forEach(e=>{let t=new Date(e.date);isNaN(t.getTime())||t.getFullYear()!==l||t.getMonth()!==c||("income"===e.type?d+=e.amount:"expense"!==e.type||(u+=e.amount))}),n.push(d),o.push(u)}let m="#2a9d8f",p="#e74c3c",f=(e,t=.3)=>{let a=parseInt(e.slice(1,3),16),n=parseInt(e.slice(3,5),16),o=parseInt(e.slice(5,7),16);return`rgba(${a}, ${n}, ${o}, ${t})`};monthlyOverviewChartInstance?(monthlyOverviewChartInstance.data.labels=a,monthlyOverviewChartInstance.data.datasets[0].data=n,monthlyOverviewChartInstance.data.datasets[1].data=o,monthlyOverviewChartInstance.update()):monthlyOverviewChartInstance=new Chart(t,{type:"line",data:{labels:a,datasets:[{label:"Income",data:n,borderColor:m,backgroundColor:f(m,.3),fill:!0,tension:.4,pointBackgroundColor:m,pointBorderColor:"#fff",pointHoverRadius:6,pointHoverBackgroundColor:"#fff",pointHoverBorderColor:m},{label:"Expenses",data:o,borderColor:p,backgroundColor:f(p,.3),fill:!0,tension:.4,pointBackgroundColor:p,pointBorderColor:"#fff",pointHoverRadius:6,pointHoverBackgroundColor:"#fff",pointHoverBorderColor:p},]},options:{responsive:!0,maintainAspectRatio:!1,scales:{y:{beginAtZero:!0,ticks:{color:"#aaa",callback:e=>e>=1e6?"LKR "+(e/1e6).toFixed(1)+"M":e>=1e3?"LKR "+(e/1e3).toFixed(0)+"k":formatCurrency(e)},grid:{color:"rgba(255,255,255,0.1)",drawBorder:!1}},x:{ticks:{color:"#aaa"},grid:{display:!1}}},plugins:{legend:{position:"top",labels:{color:"#e0e0e0",usePointStyle:!0,boxWidth:8}},tooltip:{backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",bodyColor:"#fff",padding:10,cornerRadius:4,usePointStyle:!0,callbacks:{label:e=>`${e.dataset.label||""}: ${formatCurrency(e.parsed.y)}`}}},interaction:{mode:"index",intersect:!1}}})}function handleTransactionSubmit(e){e.preventDefault();let t=e.target,a=new FormData(t),n=a.get("transactionType"),o=parseFloat(a.get("amount")),i=a.get("account"),r="expense"===n?a.get("category"):null,s=a.get("description").trim(),l=a.get("date");if(isNaN(o)||o<=0){showNotification("Valid amount required.","error");return}if(!i){showNotification("Account required.","error");return}if("expense"===n&&!r){showNotification("Category required for expense.","error");return}if(!s){showNotification("Description required.","error");return}if(!l){showNotification("Date required.","error");return}let c=state.accounts.find(e=>e.id===i);if(!c){showNotification("Account not found.","error");return}let d=Date.now();"expense"===n&&c.balance<o&&showNotification(`Insufficient funds in ${c.name}. Transaction still added.`,"warning");let u={id:generateId(),type:n,amount:o,account:i,category:r,description:s,date:l,timestamp:d};state.transactions.push(u),"income"===n?c.balance+=o:c.balance-=o,isNaN(c.balance)&&(c.balance=0),showNotification(`${n.charAt(0).toUpperCase()+n.slice(1)} added.`,"success"),saveData(),renderDashboard(),populateDropdowns(),t.reset();let m=t.querySelector("#date");m&&(m.value=new Date().toISOString().split("T")[0]);let p=t.querySelector("#transactionType");p&&p.dispatchEvent(new Event("change")),refreshMonthlyViewIfRelevant(l)}function openEditTransactionModal(e,t){t&&t.stopPropagation();let a=state.transactions.find(t=>t.id===e);if(!a){showNotification("Transaction not found for editing.","error");return}let n=state.accounts.map(e=>`<option value="${e.id}" ${a.account===e.id?"selected":""}>${e.name} (${formatCurrency(e.balance)})</option>`).join(""),o=state.categories.sort((e,t)=>e.localeCompare(t)).map(e=>`<option value="${e}" ${a.category===e?"selected":""}>${e}</option>`).join(""),i=`
            <input type="hidden" name="editTransactionId" value="${a.id}">
            <div>
                <label for="modalTransactionType" class="block text-sm font-medium mb-1">Type</label>
                <select id="modalTransactionType" name="transactionType" required onchange="toggleCategoryVisibilityInModal(this, 'modalCategoryGroup', 'modalCategory')">
                    <option value="expense" ${"expense"===a.type?"selected":""}>Expense</option>
                    <option value="income" ${"income"===a.type?"selected":""}>Income</option>
                </select>
            </div>
            <div>
                <label for="modalAmount" class="block text-sm font-medium mb-1">Amount (LKR)</label>
                <input type="number" id="modalAmount" name="amount" value="${a.amount.toFixed(2)}" step="0.01" min="0" placeholder="e.g., 1500.50" required>
            </div>
            <div>
                <label for="modalAccount" class="block text-sm font-medium mb-1">Account</label>
                <select id="modalAccount" name="account" required>${n}</select>
            </div>
            <div id="modalCategoryGroup" style="display: ${"expense"===a.type?"block":"none"};">
                <label for="modalCategory" class="block text-sm font-medium mb-1">Category</label>
                <select id="modalCategory" name="category" ${"expense"===a.type?"required":""}>${o}</select>
            </div>
            <div>
                <label for="modalDescription" class="block text-sm font-medium mb-1">Description</label>
                <input type="text" id="modalDescription" name="description" value="${a.description}" placeholder="e.g., Lunch with friends" required>
            </div>
            <div>
                <label for="modalDate" class="block text-sm font-medium mb-1">Date</label>
                <input type="date" id="modalDate" name="date" value="${a.date}" required>
            </div>
            <button type="submit" class="btn btn-primary w-full"><i class="fas fa-save"></i> Update Transaction</button>
        `;openFormModal("Edit Transaction",i,handleEditTransactionModalSubmit);let r=document.getElementById("modalTransactionType");r&&toggleCategoryVisibilityInModal(r,"modalCategoryGroup","modalCategory")}function handleEditTransactionModalSubmit(e){e.preventDefault();let t=e.target,a=new FormData(t),n=a.get("editTransactionId"),o=state.transactions.find(e=>e.id===n);if(!o){showNotification("Transaction to edit not found.","error"),closeModal("formModal");return}let i=o.date,r=a.get("transactionType"),s=parseFloat(a.get("amount")),l=a.get("account"),c="expense"===r?a.get("category"):null,d=a.get("description").trim(),u=a.get("date");if(isNaN(s)||s<=0){showNotification("Valid amount required.","error");return}if(!l){showNotification("Account required.","error");return}if("expense"===r&&!c){showNotification("Category required for expense.","error");return}if(!d){showNotification("Description required.","error");return}if(!u){showNotification("Date required.","error");return}let m=state.accounts.find(e=>e.id===o.account);m&&("income"===o.type?m.balance-=o.amount:m.balance+=o.amount,isNaN(m.balance)&&(m.balance=0)),o.type=r,o.amount=s,o.account=l,o.category=c,o.description=d,o.date=u,o.timestamp=Date.now();let p=state.accounts.find(e=>e.id===l);p?("income"===r?p.balance+=s:p.balance-=s,isNaN(p.balance)&&(p.balance=0),p.balance<0&&(m?.id!==p.id||"expense"===r)&&showNotification(`Warning: ${p.name} now has a negative balance.`,"warning")):showNotification("New account not found. Transaction update may be incomplete.","error"),saveData(),renderDashboard(),populateDropdowns(),closeModal("formModal"),showNotification("Transaction updated successfully.","success"),refreshMonthlyViewIfRelevant(u),i!==u&&refreshMonthlyViewIfRelevant(i)}function deleteTransaction(e,t){t&&t.stopPropagation();let a=state.transactions.findIndex(t=>t.id===e);if(-1===a)return;let n=state.transactions[a],o=state.accounts.find(e=>e.id===n.account);if(confirm(`Delete: "${n.description}" (${formatCurrency(n.amount)})?`)){o&&("income"===n.type?o.balance-=n.amount:o.balance+=n.amount,isNaN(o.balance)&&(o.balance=0));let i=n.date;state.transactions.splice(a,1),saveData(),renderDashboard(),populateDropdowns(),showNotification("Transaction deleted.","success"),refreshMonthlyViewIfRelevant(i)}}function handleTransferSubmit(e){e.preventDefault();let t=e.target,a=new FormData(t),n=parseFloat(a.get("transferAmount")),o=a.get("transferFrom"),i=a.get("transferTo"),r=$("#transferError");if(r.classList.add("hidden"),isNaN(n)||n<=0){showNotification("Valid amount required.","error");return}if(o===i){r.classList.remove("hidden"),showNotification("Cannot transfer to same account.","error");return}let s=state.accounts.find(e=>e.id===o),l=state.accounts.find(e=>e.id===i);if(!s||!l){showNotification("Invalid account.","error");return}if(s.balance<n){showNotification(`Insufficient funds in ${s.name}.`,"warning");return}s.balance-=n,l.balance+=n,isNaN(s.balance)&&(s.balance=0),isNaN(l.balance)&&(l.balance=0),saveData(),renderDashboard(),populateDropdowns(),t.reset(),showNotification(`Transferred ${formatCurrency(n)} from ${s.name} to ${l.name}.`,"success")}function refreshMonthlyViewIfRelevant(e){let t=$("#monthlyViewModal"),a=$("#monthTabs .tab-button.active");if("block"===t.style.display&&a){let n=parseInt(a.dataset.month),o=parseInt(a.dataset.year),i=new Date(e+"T00:00:00");isNaN(i.getTime())||i.getFullYear()!==o||i.getMonth()!==n||renderMonthlyDetails(n,o)}}let monthlyPieChartInstance=null;function setupMonthlyView(){let e=$("#yearSelector"),t=new Date().getFullYear(),a=new Set(state.transactions.map(e=>new Date(e.date).getFullYear()));a.add(t),e.innerHTML="",[...a].sort((e,t)=>t-e).forEach(a=>{let n=document.createElement("option");n.value=a,n.textContent=a,a===t&&(n.selected=!0),e.appendChild(n)}),e.addEventListener("change",()=>{renderMonthTabs(parseInt(e.value)),$("#monthlyDetailsContainer").innerHTML='<p class="text-center text-gray-400">Select a month to view details.</p>',monthlyPieChartInstance&&(monthlyPieChartInstance.destroy(),monthlyPieChartInstance=null)}),renderMonthTabs(parseInt(e.value))}function renderMonthTabs(e){let t=$("#monthTabs");t.innerHTML="",["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",].forEach((a,n)=>{let o=document.createElement("button");o.className="tab-button !px-3 !py-1.5 !text-sm",o.textContent=a,o.dataset.month=n,o.dataset.year=e,o.onclick=()=>{$$("#monthTabs .tab-button").forEach(e=>e.classList.remove("active")),o.classList.add("active"),renderMonthlyDetails(n,e)},t.appendChild(o)})}function renderMonthlyDetails(e,t){let a=$("#monthlyDetailsContainer");a.innerHTML="";let n=state.transactions.filter(a=>{let n=new Date(a.date+"T00:00:00");return!isNaN(n.getTime())&&n.getFullYear()===t&&n.getMonth()===e}).sort((e,t)=>new Date(t.date).setHours(0,0,0,0)-new Date(e.date).setHours(0,0,0,0)||t.timestamp-e.timestamp),o=0,i=0,r={};state.categories.forEach(e=>r[e]=0);let s=0,l=new Date(t,e-1,1);state.transactions.filter(e=>{let t=new Date(e.date+"T00:00:00");return"expense"===e.type&&!isNaN(t.getTime())&&t.getFullYear()===l.getFullYear()&&t.getMonth()===l.getMonth()}).forEach(e=>s+=e.amount),n.forEach(e=>{if("income"===e.type)o+=e.amount;else if("expense"===e.type){i+=e.amount;let t=e.category||"Other";void 0!==r[t]?r[t]+=e.amount:(r.Other||(r.Other=0),r.Other+=e.amount)}});let c=document.createElement("div");c.className="monthly-view-summary-grid grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6";let d="";i>s&&s>=0?d=`<i class="fas fa-arrow-up text-indicator-bad spending-indicator" title="More than last month (${formatCurrency(s)})"></i>`:i<s&&s>0&&(d=`<i class="fas fa-arrow-down text-indicator-good spending-indicator" title="Less than last month (${formatCurrency(s)})"></i>`),c.innerHTML=`
      <div class="monthly-view-summary-card"><p class="text-sm text-gray-400 mb-1">Total Income</p><p class="text-xl font-semibold text-income">${formatCurrency(o)}</p></div>
      <div class="monthly-view-summary-card"><p class="text-sm text-gray-400 mb-1">Total Expenses ${d}</p><p class="text-xl font-semibold text-expense">${formatCurrency(i)}</p></div>
      <div class="monthly-view-summary-card"><p class="text-sm text-gray-400 mb-1">Net Flow</p><p class="text-xl font-semibold ${o-i>=0?"text-income":"text-expense"}">${formatCurrency(o-i)}</p></div>`,a.appendChild(c);let u=document.createElement("div");u.className="monthly-view-content-grid grid grid-cols-1 md:grid-cols-5 gap-6";let m=document.createElement("div");if(m.className="md:col-span-3 space-y-4",m.innerHTML='<h3 class="text-lg font-semibold mb-3">Transactions</h3>',0===n.length)m.innerHTML+='<p class="text-gray-400 text-center py-4">No transactions for this month.</p>';else{let p=n.reduce((e,t)=>{let a=new Date(t.date).toLocaleDateString("en-CA");return e[a]||(e[a]={date:new Date(t.date+"T00:00:00"),transactions:[],dailyTotalExpense:0}),e[a].transactions.push(t),"expense"===t.type&&(e[a].dailyTotalExpense+=t.amount),e},{}),f=Object.values(p).sort((e,t)=>t.date-e.date),g=document.createElement("div");g.className="max-h-[60vh] overflow-y-auto pr-2",f.forEach(e=>{let t=document.createElement("div");t.className="monthly-view-day-group";let a=document.createElement("div");a.className="monthly-view-day-header",a.innerHTML=`<span>${e.date.toLocaleDateString("en-US",{weekday:"short",day:"numeric",month:"short"})}</span><span class="text-sm text-expense">Spent: ${formatCurrency(e.dailyTotalExpense)}</span>`,t.appendChild(a),e.transactions.sort((e,t)=>t.timestamp-e.timestamp).forEach(e=>{let a=document.createElement("div");a.className="monthly-view-transaction-item";let n=state.accounts.find(t=>t.id===e.account),o=n?n.name:"Unknown",i="income"===e.type,r=i?"text-income":"text-expense",s=i?o:e.category||"Uncategorized";a.innerHTML=`
                  <div class="flex-grow mr-2 overflow-hidden">
                      <p class="font-medium truncate ${r}" title="${e.description}">${e.description}</p>
                      <p class="text-xs text-gray-400 mt-0.5">${s}</p>
                  </div>
                  <span class="font-semibold whitespace-nowrap ${r} ml-2">${i?"+":"-"}${formatCurrency(e.amount)}</span>
                  <div class="edit-btn-container flex-shrink-0 ml-2">
                      <button class="text-xs accent-text hover:text-accent-hover focus:outline-none" onclick="openEditTransactionForm('${e.id}', event)" title="Edit"><i class="fas fa-edit"></i></button>
                      <button class="text-xs text-gray-500 hover:text-expense focus:outline-none" onclick="deleteTransaction('${e.id}', event)" title="Delete"><i class="fas fa-times"></i></button>
                  </div>`,t.appendChild(a)}),g.appendChild(t)}),m.appendChild(g)}u.appendChild(m);let b=document.createElement("div");b.className="md:col-span-2 space-y-4";let y=document.createElement("div");y.className="p-4 rounded-lg",y.style.backgroundColor="var(--bg-tertiary)",y.innerHTML='<h3 class="text-lg font-semibold mb-3">Category Summary</h3>';let h=document.createElement("ul");h.className="monthly-view-category-list space-y-1 text-sm max-h-48 overflow-y-auto pr-2";let v=Object.entries(r).filter(([e,t])=>t>0).sort(([,e],[,t])=>t-e);if(v.length>0?v.forEach(([e,t])=>{let a=document.createElement("li");a.innerHTML=`<span class="truncate pr-2" title="${e}">${e}</span><span class="font-medium whitespace-nowrap">${formatCurrency(t)}</span>`,h.appendChild(a)}):h.innerHTML='<li class="text-gray-400 text-sm">No expenses in any category this month.</li>',y.appendChild(h),b.appendChild(y),v.length>0){monthlyPieChartInstance&&(monthlyPieChartInstance.destroy(),monthlyPieChartInstance=null);let C=document.createElement("div");C.className="p-4 rounded-lg h-96 md:h-[450px] flex flex-col",C.style.backgroundColor="var(--bg-tertiary)";let w=document.createElement("h3");w.className="text-lg font-semibold mb-3 text-center",w.textContent="Category Distribution",C.appendChild(w);let x=document.createElement("div");x.className="flex-grow relative chart-container";let D=document.createElement("canvas");D.id="monthlyDetailPieChartCanvas",x.appendChild(D),C.appendChild(x),b.appendChild(C);let A={labels:v.map(([e,t])=>e),values:v.map(([e,t])=>t)};setTimeout(()=>renderMonthlyPieChart(A),100)}else{let S=document.createElement("div");S.className="p-4 rounded-lg h-72 md:h-80 flex items-center justify-center",S.style.backgroundColor="var(--bg-tertiary)",S.innerHTML='<p class="text-gray-400 text-sm">No expense data for chart.</p>',b.appendChild(S),monthlyPieChartInstance&&(monthlyPieChartInstance.destroy(),monthlyPieChartInstance=null)}u.appendChild(b),a.appendChild(u)}function renderMonthlyPieChart(e){let t=document.getElementById("monthlyDetailPieChartCanvas");if(!t||!t.getContext){console.error("Canvas for monthly pie chart (id: monthlyDetailPieChartCanvas) not found or invalid."),monthlyPieChartInstance&&(monthlyPieChartInstance.destroy(),monthlyPieChartInstance=null);return}let a=t.getContext("2d"),n=["#e67e26","#2a9d8f","#e74c3c","#3498db","#f1c40f","#9b59b6","#34495e","#1abc9c","#7f8c8d","#2ecc71","#d35400","#27ae60","#c0392b",],o=e.labels.map((e,t)=>n[t%n.length]);monthlyPieChartInstance?(monthlyPieChartInstance.data.labels=e.labels,monthlyPieChartInstance.data.datasets[0].data=e.values,monthlyPieChartInstance.data.datasets[0].backgroundColor=o,monthlyPieChartInstance.update()):monthlyPieChartInstance=new Chart(a,{type:"pie",data:{labels:e.labels,datasets:[{label:"Expenses by Category",data:e.values,backgroundColor:o,borderColor:"var(--bg-secondary)",borderWidth:1,hoverOffset:8,hoverBorderColor:"var(--text-primary)"},]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!1},tooltip:{backgroundColor:"rgba(0,0,0,0.85)",titleColor:"#fff",bodyColor:"#fff",padding:12,cornerRadius:4,usePointStyle:!0,callbacks:{label:function(e){let t=e.label||"";if(t&&(t+=": "),null!==e.parsed){t+=formatCurrency(e.parsed);let a=e.chart.getDatasetMeta(0),n=a.total||a.data.reduce((e,t)=>e+t.raw,0),o=n>0?(e.parsed/n*100).toFixed(1)+"%":"0.0%";t+=` (${o})`}return t}}}}}})}function renderCreditCardSection(){let e=state.creditCard.limit||0,t=state.creditCard.transactions||[];$("#ccLimit").textContent=formatCurrency(e);let a=t.filter(e=>!e.paidOff).reduce((e,t)=>e+t.amount-(t.paidAmount||0),0),n=e-a,o=$("#ccAvailable");o.textContent=formatCurrency(n),o.classList.toggle("text-danger",n<0),o.classList.toggle("accent-text",n>=0)}function openCcHistoryModal(){let e=$("#ccHistoryModal"),t=$("#ccHistoryListContainer");if(!e||!t)return;let a=state.creditCard.limit||0,n=state.creditCard.transactions||[];$("#ccHistoryLimit").textContent=formatCurrency(a);let o=n.filter(e=>!e.paidOff).reduce((e,t)=>e+t.amount-(t.paidAmount||0),0),i=a-o;$("#ccHistorySpentUnpaid").textContent=formatCurrency(o);let r=$("#ccHistoryAvailable");r.textContent=formatCurrency(i),r.classList.toggle("text-expense",i<0),r.classList.toggle("accent-text",i>=0),t.innerHTML="";let s=[...n].sort((e,t)=>new Date(t.date).setHours(0,0,0,0)-new Date(e.date).setHours(0,0,0,0)||t.timestamp-e.timestamp);0===s.length?t.innerHTML='<p class="text-gray-400 text-sm text-center py-4">No CC transactions.</p>':s.forEach(e=>{let a=document.createElement("div");a.className=`flex justify-between items-center p-3 border-b border-gray-700 text-sm ${e.paidOff?"opacity-60":""}`;let n=e.amount-(e.paidAmount||0);a.innerHTML=`
                    <div class="cc-history-item-details flex-grow mr-3 overflow-hidden">
                        <p class="cc-history-item-description ${e.paidOff?"text-gray-500":""}" title="${e.description}">${e.description}</p>
                        <p class="cc-history-item-date">${new Date(e.date).toLocaleDateString()} ${e.paidAmount>0&&!e.paidOff?`(Paid: ${formatCurrency(e.paidAmount)})`:""}</p>
                    </div>
                    <div class="flex items-center flex-shrink-0">
                        <span class="font-semibold mr-3 ${e.paidOff?"text-gray-500":n<=.005?"text-income":"text-expense"}">
                            ${e.paidOff?formatCurrency(e.amount):formatCurrency(n)} ${e.paidOff?"":n<=.005?" (Settled)":" Left"}
                        </span>
                        <div class="edit-btn-container">
                            ${!e.paidOff&&n>.005?`<button class="text-xs text-income hover:opacity-80 focus:outline-none mr-1" onclick="openPayCcItemForm('${e.id}')" title="Pay Item"><i class="fas fa-dollar-sign"></i></button>`:""}
                            <button class="text-xs accent-text hover:text-accent-hover focus:outline-none mr-1" onclick="openEditCcTransactionForm('${e.id}')" title="Edit"><i class="fas fa-edit"></i></button>
                            <button class="text-gray-500 hover:text-expense text-xs focus:outline-none" onclick="deleteCcTransaction('${e.id}')" title="Delete"><i class="fas fa-times"></i></button>
                        </div>
                    </div>`,t.appendChild(a)}),e.style.display="block"}function openSetCcLimitForm(){let e=state.creditCard.limit||0;openFormModal("Set Credit Card Limit",`<div><label for="ccLimitAmount" class="block text-sm font-medium mb-1">Credit Limit (LKR)</label><input type="number" id="ccLimitAmount" name="ccLimitAmount" step="0.01" min="0" value="${e.toFixed(2)}" placeholder="Enter total limit" required></div><button type="submit" class="btn btn-primary w-full">Set Limit</button>`,handleSetCcLimitSubmit)}function handleCcTransactionSubmit(e){e.preventDefault();let t=e.target,a=new FormData(t),n=parseFloat(a.get("ccAmount")),o=a.get("ccDescription").trim(),i=a.get("ccDate");if(isNaN(n)||n<=0){showNotification("Valid amount required.","error");return}if(!o){showNotification("Description required.","error");return}if(!i){showNotification("Date required.","error");return}state.creditCard.transactions||(state.creditCard.transactions=[]);let r=Date.now(),s={id:generateId(),amount:n,description:o,date:i,paidAmount:0,paidOff:!1,timestamp:r};state.creditCard.transactions.push(s),showNotification("CC transaction added.","success"),saveData(),renderCreditCardSection(),"block"===$("#ccHistoryModal").style.display&&openCcHistoryModal(),t.reset();let l=t.querySelector("#ccDate");l&&(l.value=new Date().toISOString().split("T")[0])}function openEditCcTransactionModal(e){let t=state.creditCard.transactions.find(t=>t.id===e);if(!t){showNotification("CC Transaction not found for editing.","error");return}"block"===$("#ccHistoryModal").style.display&&closeModal("ccHistoryModal");let a=`
            <input type="hidden" name="editCcTransactionId" value="${t.id}">
            <div>
                <label for="modalCcAmount" class="block text-sm font-medium mb-1">Amount (LKR)</label>
                <input type="number" id="modalCcAmount" name="ccAmount" value="${t.amount.toFixed(2)}" step="0.01" min="0" placeholder="Amount spent" required>
            </div>
            <div>
                <label for="modalCcDescription" class="block text-sm font-medium mb-1">Description</label>
                <input type="text" id="modalCcDescription" name="ccDescription" value="${t.description}" placeholder="e.g., Online purchase" required>
            </div>
            <div>
                <label for="modalCcDate" class="block text-sm font-medium mb-1">Date</label>
                <input type="date" id="modalCcDate" name="ccDate" value="${t.date}" required>
            </div>
            <button type="submit" class="btn btn-primary w-full"><i class="fas fa-save"></i> Update CC Transaction</button>
        `;openFormModal("Edit CC Transaction",a,handleEditCcTransactionModalSubmit)}function handleEditCcTransactionModalSubmit(e){e.preventDefault();let t=e.target,a=new FormData(t),n=a.get("editCcTransactionId"),o=state.creditCard.transactions.find(e=>e.id===n);if(!o){showNotification("CC Transaction to edit not found.","error"),closeModal("formModal");return}let i=parseFloat(a.get("ccAmount")),r=a.get("ccDescription").trim(),s=a.get("ccDate");if(isNaN(i)||i<=0){showNotification("Valid amount required.","error");return}if(!r){showNotification("Description required.","error");return}if(!s){showNotification("Date required.","error");return}o.amount=i,o.description=r,o.date=s,o.timestamp=Date.now(),o.paidAmount>i&&(o.paidAmount=i),o.paidAmount>=i-.005?(o.paidOff=!0,o.paidAmount=i):o.paidOff=!1,saveData(),renderCreditCardSection(),closeModal("formModal"),showNotification("CC Transaction updated successfully.","success")}function deleteCcTransaction(e){let t=state.creditCard.transactions.findIndex(t=>t.id===e);if(-1===t)return;let a=state.creditCard.transactions[t];confirm(`Delete CC transaction: "${a.description}" (${formatCurrency(a.amount)})? This will also remove any associated payment records made through the app for this specific CC item.`)&&(state.transactions=state.transactions.filter(e=>!("Credit Card Payment"===e.category&&e.description.includes(a.description.substring(0,15)))),state.creditCard.transactions.splice(t,1),saveData(),renderDashboard(),renderCreditCardSection(),"block"===$("#ccHistoryModal").style.display&&openCcHistoryModal(),showNotification("CC transaction and related payments deleted.","success"))}function openAddDebtForm(){openFormModal("Add New Debt",'<div><label for="debtWho" class="block text-sm font-medium mb-1">Who do you owe?</label><input type="text" id="debtWho" name="debtWho" placeholder="e.g., John Doe" required></div><div><label for="debtWhy" class="block text-sm font-medium mb-1">Reason?</label><input type="text" id="debtWhy" name="debtWhy" placeholder="e.g., Loan" required></div><div><label for="debtAmount" class="block text-sm font-medium mb-1">Amount Owed (LKR)</label><input type="number" id="debtAmount" name="debtAmount" step="0.01" min="0.01" required></div><div><label for="debtDueDate" class="block text-sm font-medium mb-1">Due Date</label><input type="date" id="debtDueDate" name="debtDueDate" required></div><button type="submit" class="btn btn-primary w-full">Add Debt</button>',handleAddDebtSubmit);let e=new Date;e.setMonth(e.getMonth()+1);let t=$("#debtDueDate");t&&(t.value=e.toISOString().split("T")[0])}function handleAddDebtSubmit(e){e.preventDefault();let t=new FormData(e.target),a=parseFloat(t.get("debtAmount"));if(isNaN(a)||a<=0){showNotification("Invalid amount.","error");return}let n={id:generateId(),who:t.get("debtWho").trim(),why:t.get("debtWhy").trim(),amount:a,originalAmount:a,remainingAmount:a,dueDate:t.get("debtDueDate"),timestamp:Date.now()};if(!n.who||!n.why||!n.dueDate){showNotification("All fields required.","error");return}state.debts.push(n),saveData(),renderDashboard(),closeModal("formModal"),showNotification("Debt added.","success")}function openEditDebtForm(e){let t=state.debts.find(t=>t.id===e);t&&openFormModal("Edit Debt",` <input type="hidden" name="editDebtId" value="${t.id}"> <div><label class="block text-sm font-medium mb-1">Who</label><input type="text" name="debtWho" value="${t.who}" required></div> <div><label class="block text-sm font-medium mb-1">Why</label><input type="text" name="debtWhy" value="${t.why}" required></div> <div><label class="block text-sm font-medium mb-1">Original Amount</label><input type="number" name="debtOriginalAmount" value="${(t.originalAmount||t.amount).toFixed(2)}" step="0.01" min="0.01" required></div> <div><label class="block text-sm font-medium mb-1">Remaining Amount</label><input type="number" name="debtRemainingAmount" value="${t.remainingAmount.toFixed(2)}" step="0.01" min="0" required></div> <div><label class="block text-sm font-medium mb-1">Due Date</label><input type="date" name="debtDueDate" value="${t.dueDate}" required></div> <button type="submit" class="btn btn-primary w-full">Update Debt</button> `,handleEditDebtSubmit)}function handleEditDebtSubmit(e){e.preventDefault();let t=new FormData(e.target),a=t.get("editDebtId"),n=state.debts.find(e=>e.id===a);if(n){if(n.who=t.get("debtWho").trim(),n.why=t.get("debtWhy").trim(),n.originalAmount=parseFloat(t.get("debtOriginalAmount")),n.remainingAmount=parseFloat(t.get("debtRemainingAmount")),n.dueDate=t.get("debtDueDate"),n.timestamp=Date.now(),isNaN(n.originalAmount)||n.originalAmount<=0||isNaN(n.remainingAmount)||n.remainingAmount<0||n.remainingAmount>n.originalAmount){showNotification("Invalid amounts for debt. Remaining cannot exceed original.","error");return}n.amount=n.originalAmount,saveData(),renderDashboard(),closeModal("formModal"),showNotification("Debt updated.","success")}}function openPayDebtForm(e){let t=state.debts.find(t=>t.id===e);if(!t)return;let a="Debt Repayment",n="",o=state.categories.filter(e=>"income"!==e.toLowerCase()&&"credit card payment"!==e.toLowerCase()&&e.toLowerCase()!==a.toLowerCase()).sort((e,t)=>e.localeCompare(t));state.categories.some(e=>e.toLowerCase()===a.toLowerCase())?n+=`<option value="${a}" selected>${a}</option>`:n+=`<option value="${a}" selected>${a} (Suggested)</option>`,o.forEach(e=>{n+=`<option value="${e}">${e}</option>`});let i=`
      <p class="mb-2">Owed: <span class="font-semibold">${formatCurrency(t.remainingAmount)}</span> to ${t.who} for ${t.why}</p>
      <div>
          <label for="payDebtAmount" class="block text-sm font-medium mb-1">Payment Amount (LKR)</label>
          <input type="number" id="payDebtAmount" name="payDebtAmount" step="0.01" min="0.01" max="${t.remainingAmount.toFixed(2)}" value="${t.remainingAmount.toFixed(2)}" required>
      </div>
      <div>
          <label for="modalPayDebtAccount" class="block text-sm font-medium mb-1">Pay From Account</label>
          <select id="modalPayDebtAccount" name="payDebtAccount" required></select>
      </div>
      <div class="flex items-center mt-3 mb-1">
          <input type="checkbox" id="logDebtPaymentAsExpense" name="logDebtPaymentAsExpense" class="h-4 w-4 text-accent-primary border-gray-500 rounded focus:ring-accent-primary mr-2" checked>
          <label for="logDebtPaymentAsExpense" class="text-sm font-medium text-gray-300">Log this payment as an expense?</label>
      </div>
      <div id="debtPaymentCategoryGroup">
          <label for="modalPayDebtCategory" class="block text-sm font-medium mb-1">Category for this Payment</label>
          <select id="modalPayDebtCategory" name="payDebtCategory" required>${n}</select>
      </div>
      <input type="hidden" name="debtId" value="${e}">
      <button type="submit" class="btn btn-primary w-full mt-3">Make Payment</button>
  `;openFormModal(`Pay Debt: ${t.who}`,i,handlePayDebtSubmit),populateDropdowns();let r=document.getElementById("logDebtPaymentAsExpense"),s=document.getElementById("debtPaymentCategoryGroup"),l=document.getElementById("modalPayDebtCategory");r&&s&&l&&(s.style.display=r.checked?"block":"none",l.required=r.checked,r.onchange=()=>{r.checked?(s.style.display="block",l.required=!0):(s.style.display="none",l.required=!1)})}function handlePayDebtSubmit(e){e.preventDefault();let t=new FormData(e.target),a=t.get("debtId"),n=parseFloat(t.get("payDebtAmount")),o=t.get("payDebtAccount"),i="on"===t.get("logDebtPaymentAsExpense"),r=i?t.get("payDebtCategory"):null,s=new Date().toISOString().split("T")[0],l=state.debts.find(e=>e.id===a),c=state.accounts.find(e=>e.id===o);if(!l||!c){showNotification("Debt or account not found.","error");return}if(isNaN(n)||n<=0||n>l.remainingAmount+.005){showNotification("Invalid payment amount.","error");return}if(i&&!r){showNotification("Please select a category for this payment if logging as an expense.","error");return}if(c.balance<n){showNotification(`Insufficient funds in ${c.name}.`,"warning");return}c.balance-=n,isNaN(c.balance)&&(c.balance=0),l.remainingAmount-=n;let d=`Payment of ${formatCurrency(n)} made for ${l.who}. Remaining: ${formatCurrency(l.remainingAmount)}.`;if(i){let u={id:generateId(),type:"expense",amount:n,account:o,category:r,description:`Debt Pmt: ${l.who} - ${l.why.substring(0,20)}${l.why.length>20?"...":""}`,date:s,timestamp:Date.now()};state.transactions.push(u),d+=" Expense logged.",refreshMonthlyViewIfRelevant(s)}else d+=" Not logged as expense.";l.remainingAmount<=.005&&(state.debts=state.debts.filter(e=>e.id!==a),d=`Debt for ${l.who} fully paid.${i?" Expense logged.":" Not logged as expense."}`),saveData(),renderDashboard(),populateDropdowns(),closeModal("formModal"),showNotification(d,"success")}function deleteDebt(e){let t=state.debts.find(t=>t.id===e);t&&confirm(`Delete debt for "${t.who}" (${formatCurrency(t.remainingAmount)})? This removes the record only.`)&&(state.debts=state.debts.filter(t=>t.id!==e),saveData(),renderDashboard(),showNotification("Debt entry deleted.","success"))}function openAddReceivableForm(){let e=`
            <div><label for="recWho" class="block text-sm font-medium mb-1">Who owes you?</label><input type="text" id="recWho" name="recWho" placeholder="e.g., Jane Doe" required></div>
            <div><label for="recWhy" class="block text-sm font-medium mb-1">Reason?</label><input type="text" id="recWhy" name="recWhy" placeholder="e.g., Friendly loan" required></div>
            <div><label for="recAmount" class="block text-sm font-medium mb-1">Amount Owed (LKR)</label><input type="number" id="recAmount" name="recAmount" step="0.01" min="0.01" required></div>
            <div><label for="recDateGiven" class="block text-sm font-medium mb-1">Date Given</label><input type="date" id="recDateGiven" name="recDateGiven" required></div>
            <div>
                <label for="recType" class="block text-sm font-medium mb-1">Type</label>
                <select id="recType" name="recType" required onchange="toggleReceivableSourceAccount(this.value, 'recSourceAccountGroupAdd', 'recSourceAccountAdd')">
                    <option value="cash">Cash/Bank Loan</option>
                    <option value="cc">Credit Card Loan</option>
                </select>
            </div>
            <div id="recSourceAccountGroupAdd" style="display: block;"> <label for="recSourceAccountAdd" class="block text-sm font-medium mb-1">Source Account (if Cash/Bank)</label>
                <select id="recSourceAccountAdd" name="receivableSourceAccount" required></select> </div>
            <button type="submit" class="btn btn-primary w-full"><i class="fas fa-plus"></i> Add Receivable</button>
        `;openFormModal("Add New Receivable",e,handleAddReceivableSubmit);let t=$("#recDateGiven");t&&(t.value=new Date().toISOString().split("T")[0]);let a=$("#recSourceAccountAdd");a&&(a.innerHTML="",state.accounts.forEach(e=>{let t=document.createElement("option");t.value=e.id,t.textContent=`${e.name} (${formatCurrency(e.balance)})`,a.appendChild(t)}));let n=$("#recType");n&&toggleReceivableSourceAccount(n.value,"recSourceAccountGroupAdd","recSourceAccountAdd")}function toggleReceivableSourceAccount(e,t,a){let n=$(`#${t}`),o=$(`#${a}`);n&&o&&("cash"===e?(n.style.display="block",o.required=!0):(n.style.display="none",o.required=!1))}function handleAddReceivableSubmit(e){e.preventDefault();let t=new FormData(e.target),a=parseFloat(t.get("recAmount")),n=t.get("recType"),o="cash"===n?t.get("receivableSourceAccount"):null;if(isNaN(a)||a<=0){showNotification("Invalid amount.","error");return}let i={id:generateId(),who:t.get("recWho").trim(),why:t.get("recWhy").trim(),amount:a,originalAmount:a,remainingAmount:a,dateGiven:t.get("recDateGiven"),type:n,sourceAccount:o,ccTransactionId:null,timestamp:Date.now()};if(!i.who||!i.why||!i.dateGiven){showNotification("All fields required.","error");return}if("cash"===n){if(!o){showNotification("Source account required for cash loan.","error");return}let r=state.accounts.find(e=>e.id===o);if(!r){showNotification("Source account not found.","error");return}if(r.balance<a){showNotification(`Insufficient funds in ${r.name}.`,"warning");return}r.balance-=a,isNaN(r.balance)&&(r.balance=0)}else if("cc"===n){let s={id:generateId(),amount:a,description:`Loan to ${i.who}: ${i.why}`,date:i.dateGiven,paidAmount:0,paidOff:!1,timestamp:Date.now()};state.creditCard.transactions.push(s),i.ccTransactionId=s.id,showNotification(`CC transaction created for loan to ${i.who}.`,"info")}state.receivables.push(i),saveData(),renderDashboard(),populateDropdowns(),"cc"===n&&renderCreditCardSection(),closeModal("formModal"),showNotification(`Receivable for ${i.who} added.${"cash"===n&&o?` ${formatCurrency(a)} deducted from account.`:""}`,"success")}function openEditReceivableForm(e){let t=state.receivables.find(t=>t.id===e);if(!t)return;openFormModal("Edit Receivable",` <input type="hidden" name="editReceivableId" value="${t.id}"> <div><label class="block text-sm font-medium mb-1">Who</label><input type="text" name="recWho" value="${t.who}" required></div> <div><label class="block text-sm font-medium mb-1">Why</label><input type="text" name="recWhy" value="${t.why}" required></div> <div><label class="block text-sm font-medium mb-1">Original Amount</label><input type="number" name="recOriginalAmount" value="${(t.originalAmount||t.amount).toFixed(2)}" step="0.01" min="0.01" required></div> <div><label class="block text-sm font-medium mb-1">Remaining</label><input type="number" name="recRemainingAmount" value="${t.remainingAmount.toFixed(2)}" step="0.01" min="0" required></div> <div><label class="block text-sm font-medium mb-1">Date Given</label><input type="date" name="recDateGiven" value="${t.dateGiven}" required></div> <div><label class="block text-sm font-medium mb-1">Type</label><select id="recTypeEdit" name="recType" onchange="toggleReceivableSourceAccount(this.value, 'recSourceAccountGroupEdit', 'recSourceAccountEdit')"><option value="cash" ${"cash"===t.type?"selected":""}>Cash/Bank</option><option value="cc" ${"cc"===t.type?"selected":""}>Credit Card</option></select></div> <div id="recSourceAccountGroupEdit" style="display:${"cash"===t.type?"block":"none"}"><label class="block text-sm font-medium mb-1">Source Account</label><select id="recSourceAccountEdit" name="receivableSourceAccount">${state.accounts.map(e=>`<option value="${e.id}" ${t.sourceAccount===e.id?"selected":""}>${e.name} (${formatCurrency(e.balance)})</option>`).join("")}</select></div> <button type="submit" class="btn btn-primary w-full">Update Receivable</button> `,handleEditReceivableSubmit);let a=$("#recTypeEdit");a&&toggleReceivableSourceAccount(a.value,"recSourceAccountGroupEdit","recSourceAccountEdit")}function handleEditReceivableSubmit(e){e.preventDefault();let t=new FormData(e.target),a=t.get("editReceivableId"),n=state.receivables.find(e=>e.id===a);if(!n)return;let o=n.sourceAccount,i=n.originalAmount,r=n.type,s=n.ccTransactionId;n.who=t.get("recWho").trim(),n.why=t.get("recWhy").trim();let l=parseFloat(t.get("recOriginalAmount"));if(n.remainingAmount=parseFloat(t.get("recRemainingAmount")),n.dateGiven=t.get("recDateGiven"),n.type=t.get("recType"),n.sourceAccount="cash"===n.type?t.get("receivableSourceAccount"):null,n.timestamp=Date.now(),isNaN(l)||l<=0||isNaN(n.remainingAmount)||n.remainingAmount<0||n.remainingAmount>l){showNotification("Invalid amounts.","error");return}if("cash"===n.type&&!n.sourceAccount){showNotification("Source account required for cash loan.","error");return}let c=state.accounts.find(e=>e.id===o);if("cash"===r&&c&&(c.balance+=i),"cc"===r&&s&&(state.creditCard.transactions=state.creditCard.transactions.filter(e=>e.id!==s)),n.originalAmount=l,n.amount=l,n.ccTransactionId=null,"cash"===n.type&&n.sourceAccount){let d=state.accounts.find(e=>e.id===n.sourceAccount);if(d){if(d.balance<n.amount){showNotification(`Insufficient funds in new source ${d.name}. Reverting.`,"warning"),"cash"===r&&c&&(c.balance-=i),"cc"===r&&s&&console.warn("Could not re-add old CC tx during revert."),n.originalAmount=i,n.amount=i;return}d.balance-=n.amount}}else if("cc"===n.type){let u={id:generateId(),amount:n.amount,description:`Loan to ${n.who}: ${n.why}`,date:n.dateGiven,paidAmount:0,paidOff:!1,timestamp:Date.now()};state.creditCard.transactions.push(u),n.ccTransactionId=u.id}saveData(),renderDashboard(),populateDropdowns(),("cc"===n.type||"cc"===r)&&renderCreditCardSection(),closeModal("formModal"),showNotification("Receivable updated.","success")}function openReceivePaymentForm(e){let t=state.receivables.find(t=>t.id===e);t&&(openFormModal(`Receive Payment: ${t.who}`,`<p class="mb-2">Owed: <span class="font-semibold">${formatCurrency(t.remainingAmount)}</span> for ${t.why}</p><div><label class="block text-sm font-medium mb-1">Amount Received</label><input type="number" name="recPaymentAmount" step="0.01" min="0.01" max="${t.remainingAmount.toFixed(2)}" value="${t.remainingAmount.toFixed(2)}" required></div><div><label class="block text-sm font-medium mb-1">Receive Into Account</label><select name="recPaymentAccount" required></select></div><input type="hidden" name="recId" value="${e}"><button type="submit" class="btn btn-primary w-full">Record Payment</button>`,handleReceivePaymentSubmit),populateDropdowns())}function handleReceivePaymentSubmit(e){e.preventDefault();let t=new FormData(e.target),a=t.get("recId"),n=parseFloat(t.get("recPaymentAmount")),o=t.get("recPaymentAccount"),i=state.receivables.find(e=>e.id===a),r=state.accounts.find(e=>e.id===o);if(!i||!r){showNotification("Receivable/account not found.","error");return}if(isNaN(n)||n<=0||n>i.remainingAmount+.005){showNotification("Invalid payment amount.","error");return}r.balance+=n,i.remainingAmount-=n,isNaN(r.balance)&&(r.balance=0);let s=`Payment of ${formatCurrency(n)} received from ${i.who}. Remaining: ${formatCurrency(i.remainingAmount)}`;i.remainingAmount<=.005&&(state.receivables=state.receivables.filter(e=>e.id!==a),s=`Receivable from ${i.who} fully paid.`),saveData(),renderDashboard(),populateDropdowns(),closeModal("formModal"),showNotification(s,"success")}function deleteReceivable(e){let t=state.receivables.find(t=>t.id===e);if(!t)return;let a=`Delete receivable for "${t.who}" (${formatCurrency(t.remainingAmount)})? This removes the record.`;"cash"===t.type&&t.sourceAccount?a+=`

Warning: Does NOT refund amount deducted from source account.`:"cc"===t.type&&t.ccTransactionId&&(a+=`

Warning: This will also remove the associated CC transaction record.`),confirm(a)&&("cc"===t.type&&t.ccTransactionId&&(state.creditCard.transactions=state.creditCard.transactions.filter(e=>e.id!==t.ccTransactionId)),state.receivables=state.receivables.filter(t=>t.id!==e),saveData(),renderDashboard(),"cc"===t.type&&renderCreditCardSection(),showNotification("Receivable entry deleted.","success"))}function openAddInstallmentForm(){let e=`
            <div>
                <label for="instDescription" class="block text-sm font-medium mb-1">Description</label>
                <input type="text" id="instDescription" name="instDescription" placeholder="e.g., New Phone" required>
            </div>
            <div>
                <label for="instFullAmount" class="block text-sm font-medium mb-1">Full Original Amount (LKR)</label>
                <input type="number" id="instFullAmount" name="instFullAmount" step="0.01" min="0.01" placeholder="Total original cost" required>
            </div>
            <div>
                <label for="instTotalMonths" class="block text-sm font-medium mb-1">Total Months for Plan</label>
                <input type="number" id="instTotalMonths" name="instTotalMonths" step="1" min="1" placeholder="e.g., 12" required>
            </div>
            <div>
                <label for="instMonthsLeft" class="block text-sm font-medium mb-1">Months Left (if not full term)</label>
                <input type="number" id="instMonthsLeft" name="instMonthsLeft" step="1" min="0" placeholder="Defaults to Total Months">
            </div>
            <div>
                <label for="instStartDate" class="block text-sm font-medium mb-1">Start Date</label>
                <input type="date" id="instStartDate" name="instStartDate" required>
            </div>
            <button type="submit" class="btn btn-primary w-full">Add Plan</button>
        `;openFormModal("Add New Installment Plan",e,handleAddInstallmentSubmit);let t=$("#instStartDate");t&&(t.value=new Date().toISOString().split("T")[0]);let a=$("#instTotalMonths"),n=$("#instMonthsLeft");if(a&&n){let o=()=>{let e=parseInt(a.value);!isNaN(e)&&e>0?(n.max=e,parseInt(n.value)>e&&(n.value=e)):n.removeAttribute("max")};a.addEventListener("input",o),o()}}function handleAddInstallmentSubmit(e){e.preventDefault();let t=new FormData(e.target),a=parseFloat(t.get("instFullAmount")),n=parseInt(t.get("instTotalMonths")),o=parseInt(t.get("instMonthsLeft"));if(isNaN(a)||a<=0||isNaN(n)||n<=0){showNotification("Invalid full amount or total months.","error");return}(isNaN(o)||o>n||o<0)&&(o=n);let i={id:generateId(),description:t.get("instDescription").trim(),monthlyAmount:a/n,totalMonths:n,monthsLeft:o,startDate:t.get("instStartDate"),originalFullAmount:a,timestamp:Date.now()};if(!i.description||!i.startDate){showNotification("Description and Start Date are required.","error");return}state.installments.push(i),saveData(),renderDashboard(),closeModal("formModal"),showNotification("Installment plan added.","success")}function openEditInstallmentForm(e){let t=state.installments.find(t=>t.id===e);if(!t)return;let a=t.originalFullAmount||t.monthlyAmount*t.totalMonths;openFormModal("Edit Installment Plan",` <input type="hidden" name="editInstallmentId" value="${t.id}"> <div><label class="block text-sm font-medium mb-1">Description</label><input type="text" name="instDescription" value="${t.description}" required></div> <div><label class="block text-sm font-medium mb-1">Full Amount</label><input type="number" name="instFullAmount" value="${a.toFixed(2)}" step="0.01" min="0.01" required></div> <div><label class="block text-sm font-medium mb-1">Total Months</label><input type="number" name="instTotalMonths" value="${t.totalMonths}" step="1" min="1" required></div> <div><label class="block text-sm font-medium mb-1">Months Left</label><input type="number" name="instMonthsLeft" value="${t.monthsLeft}" step="1" min="0" max="${t.totalMonths}" required></div> <div><label class="block text-sm font-medium mb-1">Start Date</label><input type="date" name="instStartDate" value="${t.startDate}" required></div> <button type="submit" class="btn btn-primary w-full">Update Plan</button> `,handleEditInstallmentSubmit)}function handleEditInstallmentSubmit(e){e.preventDefault();let t=new FormData(e.target),a=t.get("editInstallmentId"),n=state.installments.find(e=>e.id===a);if(!n)return;let o=parseFloat(t.get("instFullAmount")),i=parseInt(t.get("instTotalMonths"));if(isNaN(o)||o<=0||isNaN(i)||i<=0){showNotification("Invalid full amount or total months.","error");return}if(n.description=t.get("instDescription").trim(),n.totalMonths=i,n.monthsLeft=parseInt(t.get("instMonthsLeft")),n.startDate=t.get("instStartDate"),n.monthlyAmount=o/i,n.originalFullAmount=o,n.timestamp=Date.now(),isNaN(n.monthsLeft)||n.monthsLeft<0||n.monthsLeft>n.totalMonths){showNotification("Invalid months left.","error");return}saveData(),renderDashboard(),closeModal("formModal"),showNotification("Installment plan updated.","success")}function payInstallmentMonth(e){let t=state.installments.find(t=>t.id===e);if(!t||t.monthsLeft<=0)return;let a=state.categories.filter(e=>"Income"!==e&&"Credit Card Payment"!==e).map(e=>`<option value="${e}" ${"Installment Payment"===e?"selected":""}>${e}</option>`).join("");openFormModal(`Pay Installment: ${t.description}`,`<p class="mb-2">Paying 1 month (${formatCurrency(t.monthlyAmount)}). ${t.monthsLeft-1} months will remain.</p><div><label class="block text-sm font-medium mb-1">Pay From Account</label><select id="modalInstPayAccount" name="instPayAccount" required></select></div><div><label class="block text-sm font-medium mb-1">Category</label><select id="modalInstPayCategory" name="instPayCategory" required>${a}</select></div><input type="hidden" name="installmentId" value="${e}"><button type="submit" class="btn btn-primary w-full">Confirm Payment</button>`,handlePayInstallmentSubmit),populateDropdowns()}function handlePayInstallmentSubmit(e){e.preventDefault();let t=new FormData(e.target),a=t.get("installmentId"),n=t.get("instPayAccount"),o=t.get("instPayCategory"),i=state.installments.find(e=>e.id===a),r=state.accounts.find(e=>e.id===n);if(!i||!r){showNotification("Installment or account not found.","error");return}if(i.monthsLeft<=0){showNotification("Installment plan already fully paid.","info"),closeModal("formModal");return}if(r.balance<i.monthlyAmount){showNotification(`Insufficient funds in ${r.name}.`,"warning");return}if(!o){showNotification("Please select a category for this payment.","error");return}r.balance-=i.monthlyAmount,isNaN(r.balance)&&(r.balance=0),i.monthsLeft-=1;let s=new Date().toISOString().split("T")[0],l={id:generateId(),type:"expense",amount:i.monthlyAmount,account:n,category:o,description:`Installment: ${i.description} (Month ${i.totalMonths-i.monthsLeft}/${i.totalMonths})`,date:s,timestamp:Date.now()};state.transactions.push(l);let c;i.monthsLeft<=0?(state.installments=state.installments.filter(e=>e.id!==a),c=`Installment for "${i.description}" fully paid and removed. Expense logged.`):c=`Installment month paid for "${i.description}". ${i.monthsLeft} months remaining. Expense logged.`,saveData(),renderDashboard(),populateDropdowns(),closeModal("formModal"),showNotification(c,"success"),refreshMonthlyViewIfRelevant(s)}function deleteInstallment(e){let t=state.installments.find(t=>t.id===e);t&&confirm(`Delete installment plan "${t.description}"? This removes the record only.`)&&(state.installments=state.installments.filter(t=>t.id!==e),saveData(),renderDashboard(),showNotification("Installment plan deleted.","success"))}function openPayCcItemForm(e){let t=state.creditCard.transactions.find(t=>t.id===e);if(!t)return;let a=t.amount-(t.paidAmount||0);if(a<=.005){showNotification("This item is already fully paid/settled.","info");return}let n="Credit Card Payment",o="",i=state.categories.filter(e=>"income"!==e.toLowerCase()&&e.toLowerCase()!==n.toLowerCase()).sort((e,t)=>e.localeCompare(t));state.categories.some(e=>e.toLowerCase()===n.toLowerCase())?o+=`<option value="${n}" selected>${n}</option>`:o+=`<option value="${n}" selected>${n} (Suggested)</option>`,i.forEach(e=>{o+=`<option value="${e}">${e}</option>`});let r=`
      <input type="hidden" name="ccItemId" value="${t.id}">
      <p class="mb-2">Item Amount: ${formatCurrency(t.amount)}</p>
      <p class="mb-2">Paid So Far: ${formatCurrency(t.paidAmount||0)}</p>
      <p class="mb-2">Remaining on Item: <strong class="text-danger">${formatCurrency(a)}</strong></p>
      <div>
          <label for="ccItemPayAmount" class="block text-sm font-medium mb-1">Payment Amount</label>
          <input type="number" id="ccItemPayAmount" name="ccItemPayAmount" step="0.01" min="0.01" max="${a.toFixed(2)}" value="${a.toFixed(2)}" required>
      </div>
      <div>
          <label for="modalCcPayFromAccount" class="block text-sm font-medium mb-1">Pay From Account</label>
          <select id="modalCcPayFromAccount" name="ccPayFromAccount" required></select>
      </div>
      <div class="flex items-center mt-3 mb-1">
          <input type="checkbox" id="logCcPaymentAsExpense" name="logCcPaymentAsExpense" class="h-4 w-4 text-accent-primary border-gray-500 rounded focus:ring-accent-primary mr-2" checked>
          <label for="logCcPaymentAsExpense" class="text-sm font-medium text-gray-300">Log this payment as an expense?</label>
      </div>
      <div id="ccPaymentCategoryGroup">
          <label for="modalCcPayCategory" class="block text-sm font-medium mb-1">Category for this Payment</label>
          <select id="modalCcPayCategory" name="ccPayCategory" required>${o}</select>
      </div>
      <button type="submit" class="btn btn-primary w-full mt-3">Make Payment</button>
  `;openFormModal(`Pay CC Item: ${t.description.substring(0,30)}...`,r,handlePayCcItemSubmit),populateDropdowns();let s=document.getElementById("logCcPaymentAsExpense"),l=document.getElementById("ccPaymentCategoryGroup"),c=document.getElementById("modalCcPayCategory");s&&l&&c&&(l.style.display=s.checked?"block":"none",c.required=s.checked,s.onchange=()=>{s.checked?(l.style.display="block",c.required=!0):(l.style.display="none",c.required=!1)})}function handlePayCcItemSubmit(e){e.preventDefault();let t=new FormData(e.target),a=t.get("ccItemId"),n=parseFloat(t.get("ccItemPayAmount")),o=t.get("ccPayFromAccount"),i="on"===t.get("logCcPaymentAsExpense"),r=i?t.get("ccPayCategory"):null,s=state.creditCard.transactions.find(e=>e.id===a),l=state.accounts.find(e=>e.id===o);if(!s||!l){showNotification("Item or account not found.","error");return}let c=s.amount-(s.paidAmount||0);if(isNaN(n)||n<=0||n>c+.005){showNotification("Invalid payment amount for CC item.","error");return}if(i&&!r){showNotification("Please select a category for this payment if logging as an expense.","error");return}if(l.balance<n){showNotification(`Insufficient funds in ${l.name}.`,"warning");return}l.balance-=n,isNaN(l.balance)&&(l.balance=0),s.paidAmount=(s.paidAmount||0)+n,s.paidAmount>=s.amount-.005&&(s.paidOff=!0,s.paidAmount=s.amount);let d=`Payment of ${formatCurrency(n)} for CC item "${s.description.substring(0,20)}..." recorded.`,u=new Date().toISOString().split("T")[0];if(i){let m={id:generateId(),type:"expense",amount:n,account:o,category:r,description:`CC Pmt: ${s.description.substring(0,20)}${s.description.length>20?"...":""}`,date:u,timestamp:Date.now()};state.transactions.push(m),d+=" Expense logged.",refreshMonthlyViewIfRelevant(u)}else d+=" Not logged as expense.";s.paidOff&&(d=`CC item "${s.description.substring(0,20)}..." fully paid.${i?" Expense logged.":" Not logged as expense."}`),saveData(),renderDashboard(),renderCreditCardSection(),"block"===$("#ccHistoryModal").style.display&&openCcHistoryModal(),closeModal("formModal"),showNotification(d,"success")}function openSettingsModal(){renderSettingsForm(),setupSettingsTabs();let e=$("#storageSizeInfo");e&&(e.textContent=`Approx. Storage Used: ${getFormattedLocalStorageSize(STORAGE_KEY)}`),$("#settingsModal").style.display="block",cancelDeleteAllData(),displayAppVersion()}function renderSettingsForm(){let e=$("#accountManagementList");e?(e.innerHTML="",state.accounts.forEach(t=>{let a=document.createElement("div");a.className="grid grid-cols-1 sm:grid-cols-[minmax(0,2fr),minmax(0,2fr)] gap-x-3 gap-y-2 items-center py-1";let n=document.createElement("input");n.type="text",n.name=`accountName_${t.id}`,n.value=t.name,n.dataset.accountId=t.id,n.className="!py-1 !px-2 text-sm rounded placeholder-gray-400",n.style.backgroundColor="var(--bg-secondary)",n.style.borderColor="var(--border-color)",n.style.color="var(--text-primary)","cash"===t.id&&(n.readOnly=!0,n.classList.add("text-gray-400","cursor-not-allowed"));let o=document.createElement("input");o.type="number",o.name=`accountBalance_${t.id}`,o.value=t.balance.toFixed(2),o.step="0.01",o.dataset.accountId=t.id,o.className="!py-1 !px-2 text-sm rounded placeholder-gray-400",o.style.backgroundColor="var(--bg-secondary)",o.style.borderColor="var(--border-color)",o.style.color="var(--text-primary)",a.appendChild(n),a.appendChild(o),e.appendChild(a)})):console.error("#accountManagementList element not found in #settingsAccountsPanel.");let t=$("#manageAccountsForm");t&&(t.onsubmit=handleManageAccountsSubmit);let a=$("#settingsCcLimitAmount");a&&(a.value=(state.creditCard&&state.creditCard.limit||0).toFixed(2),a.style.backgroundColor="var(--bg-secondary)",a.style.borderColor="var(--border-color)",a.style.color="var(--text-primary)");let n=$("#settingsCcLimitForm");n&&(n.onsubmit=e=>{e.preventDefault();let t=new FormData(n),a=parseFloat(t.get("ccLimitAmount"));if(isNaN(a)||a<0){showNotification("Invalid credit limit amount.","error");return}state.creditCard||(state.creditCard={limit:0,transactions:[]}),state.creditCard.limit=a,saveData(),renderCreditCardSection(),"block"===$("#ccHistoryModal").style.display&&openCcHistoryModal(),showNotification(`Credit limit set to ${formatCurrency(a)}.`,"success")});let o=$("#toggleCcSection");o&&(state.settings||(state.settings={initialSetupDone:!1,showCcDashboardSection:!0,theme:"dark"}),o.checked=void 0===state.settings.showCcDashboardSection||state.settings.showCcDashboardSection,o.dataset.listenerAttached||(o.onchange=()=>{state.settings||(state.settings={initialSetupDone:!1,showCcDashboardSection:!0,theme:"dark"}),state.settings.showCcDashboardSection=o.checked,saveData(),updateCcDashboardSectionVisibility(),showNotification(`Credit Card section on dashboard will now be ${o.checked?"shown":"hidden"}.`,"info")},o.dataset.listenerAttached="true"));let i=$("#addCategoryForm");if(i){i.onsubmit=addCategory;let r=i.querySelector("#newCategoryName");r&&(r.style.backgroundColor="var(--bg-secondary)",r.style.borderColor="var(--border-color)",r.style.color="var(--text-primary)")}renderCategorySettingsList()}function renderCategorySettingsList(){let e=$("#categorySettingsList");if(!e){console.error("#categorySettingsList element not found.");return}e.innerHTML="";let t=[...state.categories].sort((e,t)=>e.localeCompare(t));t.forEach(t=>{let a=document.createElement("li");a.className="flex justify-between items-center p-2 rounded",a.style.backgroundColor="var(--bg-secondary)",a.style.borderColor="var(--border-color)",a.style.borderWidth="1px";let n=`<input type="text" value="${t}" data-original-name="${t}" class="bg-transparent border-none focus:ring-0 focus:outline-none p-0 flex-grow mr-2 text-sm">`,o=document.createElement("div");o.className="flex items-center gap-x-2";let i=`<button class="text-gray-400 hover:text-expense focus:outline-none" onclick="deleteCategory('${t}')" title="Delete Category"><i class="fas fa-times"></i></button>`;a.innerHTML=n,o.innerHTML='<button class="btn btn-primary btn-sm !py-0.5 !px-2 text-xs" onclick="renameCategory(this)">Save</button>'+i,a.appendChild(o),e.appendChild(a)})}function renameCategory(e){let t=e.closest("li"),a=t.querySelector('input[type="text"]'),n=a.value.trim(),o=a.dataset.originalName;if(!n){showNotification("Category name cannot be empty.","error"),a.value=o;return}if(n===o)return;if(state.categories.some(e=>e.toLowerCase()===n.toLowerCase()&&e!==o)){showNotification(`Category name "${n}" already exists.`,"error"),a.value=o;return}let i=state.categories.indexOf(o);if(i>-1){state.categories[i]=n,state.categories.sort((e,t)=>e.localeCompare(t));let r=0;state.transactions.forEach(e=>{e.category===o&&(e.category=n,r++)}),saveData(),populateDropdowns(),renderCategorySettingsList(),showNotification(`Category "${o}" renamed to "${n}". ${r} transaction(s) updated.`,"success")}else showNotification(`Original category "${o}" not found.`,"error"),a.value=o}function addCategory(e){e.preventDefault();let t=$("#newCategoryName"),a=t.value.trim();if(!a){showNotification("Category name cannot be empty.","error");return}if(state.categories.some(e=>e.toLowerCase()===a.toLowerCase())){showNotification(`Category "${a}" already exists.`,"warning"),t.value="";return}state.categories.push(a),state.categories.sort((e,t)=>e.localeCompare(t)),saveData(),populateDropdowns(),renderCategorySettingsList(),t.value="",showNotification(`Category "${a}" added.`,"success")}function deleteCategory(e){if("Other"===e){showNotification("The 'Other' category cannot be deleted.","warning");return}let t=state.transactions.some(t=>t.category===e);if(t){showNotification(`Category "${e}" is in use and cannot be deleted. Reassign transactions first or rename the category.`,"error");return}if(!state.categories.includes(e)){showNotification(`Category "${e}" not found.`,"error");return}confirm(`Are you sure you want to delete the category "${e}"? This action cannot be undone if the category is not in use.`)&&(state.categories=state.categories.filter(t=>t!==e),saveData(),populateDropdowns(),renderCategorySettingsList(),showNotification(`Category "${e}" deleted.`,"success"))}function handleSetCcLimitSubmit(e){e.preventDefault();let t=new FormData(e.target),a=parseFloat(t.get("ccLimitAmount"));if(isNaN(a)||a<0){showNotification("Invalid credit limit.","error");return}state.creditCard.limit=a,saveData(),renderCreditCardSection(),"block"===$("#ccHistoryModal").style.display&&openCcHistoryModal(),closeModal("formModal"),showNotification(`Credit limit set to ${formatCurrency(a)}.`,"success")}function updateCcDashboardSectionVisibility(){let e=$("#creditCardDashboardSection");if(e){let t=!0;state.settings&&void 0!==state.settings.showCcDashboardSection?t=state.settings.showCcDashboardSection:void 0===state.settings&&(state.settings={initialSetupDone:!1,showCcDashboardSection:!0},console.log("state.settings was undefined, initialized showCcDashboardSection to true")),t?e.style.display="":e.style.display="none"}$("#ccLimitSettingsCard")}function handleManageAccountsSubmit(e){e.preventDefault();let t=new FormData(e.target),a=!1,n=[];if(state.accounts.forEach(e=>{let o=t.get(`accountName_${e.id}`),i=t.get(`accountBalance_${e.id}`);if(null===o||null===i){console.warn(`Inputs for account ${e.id} not found in form data.`);return}let r=o.trim(),s=parseFloat(i);"cash"!==e.id&&(r?r!==e.name&&(state.accounts.some(t=>t.id!==e.id&&t.name.toLowerCase()===r.toLowerCase())?n.push(`Account name "${r}" already exists. Please choose a unique name.`):(console.log(`Account ${e.id} name changed from "${e.name}" to "${r}"`),e.name=r,a=!0)):n.push(`Account name for "${e.name}" (ID: ${e.id}) cannot be empty.`)),isNaN(s)?n.push(`Invalid balance entered for account "${e.name}". Please enter a valid number.`):Math.abs(e.balance-s)>.005&&(console.log(`Account ${e.id} balance changed from ${e.balance.toFixed(2)} to ${s.toFixed(2)}`),e.balance=s,a=!0)}),n.length>0){n.forEach(e=>showNotification(e,"error",6e3)),renderSettingsForm();return}a?(state.settings&&!state.settings.initialSetupDone&&(state.settings.initialSetupDone=!0),saveData(),renderDashboard(),populateDropdowns(),renderSettingsForm(),showNotification("Account names and/or balances updated successfully.","success")):showNotification("No changes detected in account names or balances.","info")}function exportData(){try{let e=JSON.stringify(state,null,2),t=new Blob([e],{type:"application/json"}),a=URL.createObjectURL(t),n=document.createElement("a"),o=new Date().toISOString().slice(0,19).replace(/[:T]/g,"-");n.download=`kaasi-backup-${o}.json`,n.href=a,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(a),showNotification("Data exported.","success")}catch(i){console.error("Export failed:",i),showNotification("Data export failed.","error")}}function importData(e){let t=e.target.files[0];if(!t)return;if(!confirm("Importing data will OVERWRITE ALL current data. Proceed?")){e.target.value=null;return}let a=new FileReader;a.onload=t=>{try{let a=JSON.parse(t.target.result);if(a&&a.accounts&&void 0!==a.transactions&&a.categories&&a.creditCard)state=deepMerge(getDefaultState(),a),ensureDefaultAccounts(),ensureDefaultCategories(),state.accounts.forEach(e=>{isNaN(e.balance)&&(e.balance=0)}),isNaN(state.creditCard.limit)&&(state.creditCard.limit=0),saveData(),initializeUI(!0),showNotification("Data imported. Application refreshed.","success"),closeModal("settingsModal");else throw Error("Invalid data structure.")}catch(n){console.error("Import failed:",n),showNotification(`Import failed: ${n.message}`,"error")}finally{e.target.value=null}},a.onerror=()=>{showNotification("Failed to read file.","error"),e.target.value=null},a.readAsText(t)}function initiateDeleteAllData(){$("#initiateDeleteBtn").classList.add("hidden"),$("#deleteConfirmationSection").classList.remove("hidden"),resetDeleteSlider()}function cancelDeleteAllData(){$("#initiateDeleteBtn").classList.remove("hidden"),$("#deleteConfirmationSection").classList.add("hidden"),resetDeleteSlider()}let maxTranslateX=0,isDragging=!1;function setupDeleteSlider(){let e=$("#deleteSliderContainer"),t=$("#deleteSliderHandle"),a=e.querySelector(".slide-to-confirm-track");if(!e||!t||!a)return;let n=0,o=0,i=()=>{maxTranslateX=e.offsetWidth-t.offsetWidth-4};window.resetDeleteSlider=()=>{isDragging=!1,o=0,t.style.transition="transform 0.2s ease-out, background-color 0.2s ease-out",a.style.transition="width 0.2s ease-out, background-color 0.2s ease-out",t.style.transform="translateX(0px)",a.style.width="0px",a.style.backgroundColor="var(--button-success-bg)",t.innerHTML='<i class="fas fa-arrow-right"></i>',t.style.backgroundColor="var(--accent-primary)",t.style.cursor="grab",e.style.cursor="pointer"};let r=o=>{i(),isDragging=!0,n=o-t.getBoundingClientRect().left,t.style.transition="none",a.style.transition="none",t.style.cursor="grabbing",e.style.cursor="grabbing"},s=i=>{if(isDragging)o=Math.max(0,Math.min(i-e.getBoundingClientRect().left-n,maxTranslateX)),t.style.transform=`translateX(${o}px)`,a.style.width=`${o+t.offsetWidth/2}px`},l=()=>{isDragging&&(isDragging=!1,t.style.cursor="grab",e.style.cursor="pointer",t.style.transition="transform 0.2s ease-out, background-color 0.2s ease-out",a.style.transition="width 0.2s ease-out, background-color 0.2s ease-out",o>=maxTranslateX-1?completeDeletion():resetDeleteSlider())};t.addEventListener("mousedown",e=>r(e.clientX)),document.addEventListener("mousemove",e=>{isDragging&&s(e.clientX)}),document.addEventListener("mouseup",l),t.addEventListener("touchstart",e=>{e.preventDefault(),r(e.touches[0].clientX)},{passive:!1}),document.addEventListener("touchmove",e=>{isDragging&&(e.preventDefault(),s(e.touches[0].clientX))},{passive:!1}),document.addEventListener("touchend",l),window.addEventListener("resize",()=>{$("#deleteConfirmationSection")&&!$("#deleteConfirmationSection").classList.contains("hidden")&&(i(),resetDeleteSlider())})}function completeDeletion(){let e=$("#deleteSliderHandle"),t=$(".slide-to-confirm-track");e.innerHTML='<i class="fas fa-check"></i>',e.style.backgroundColor="var(--button-success-bg)",t.style.width="100%",t.style.backgroundColor="var(--button-success-bg)",e.style.transform=`translateX(${maxTranslateX}px)`,isDragging=!1,e.style.pointerEvents="none",setTimeout(()=>{localStorage.removeItem(STORAGE_KEY),state=getDefaultState(),ensureDefaultAccounts(),ensureDefaultCategories(),initializeUI(!0),closeModal("settingsModal"),showNotification("All data deleted.","success"),e.style.pointerEvents="auto"},500)}function openCashCounter(){let e=$("#cashCounterForm"),t=e.querySelector(".grid");for(;t.children.length>3;)t.removeChild(t.lastChild);[5e3,1e3,500,100,50,20,10,5,2,1].forEach(e=>{let a=document.createElement("span");a.className="font-medium text-right pr-2 text-sm",a.textContent=`Rs. ${e}`;let n=document.createElement("input");n.type="number",n.min="0",n.dataset.denom=e,n.className="text-center bg-gray-600 border border-gray-500 rounded px-1 py-0.5 w-16 mx-auto text-sm",n.placeholder="0",n.oninput=calculateCashTotal;let o=document.createElement("span");o.className="text-right text-gray-400 text-sm",o.id=`cashTotal-${e}`,o.textContent=formatCurrency(0),t.appendChild(a),t.appendChild(n),t.appendChild(o)}),calculateCashTotal(),$("#cashCounterModal").style.display="block",$("#cashCounterComparison").innerHTML=""}function calculateCashTotal(){let e=0;$$('#cashCounterForm input[type="number"]').forEach(t=>{let a=parseInt(t.value)||0,n=parseInt(t.dataset.denom),o=a*n;e+=o;let i=$(`#cashTotal-${n}`);i&&(i.textContent=formatCurrency(o))}),$("#cashCounterTotal").textContent=formatCurrency(e);let t=state.accounts.find(e=>"cash"===e.id);if(t){let a=e-t.balance,n=$("#cashCounterComparison");.01>Math.abs(a)?n.innerHTML=`<p class="text-success">Counted cash matches calculated balance: ${formatCurrency(t.balance)}</p>`:a>0?n.innerHTML=`<p class="text-warning">Counted cash is ${formatCurrency(a)} MORE than calculated balance (${formatCurrency(t.balance)})</p>`:n.innerHTML=`<p class="text-danger">Counted cash is ${formatCurrency(Math.abs(a))} LESS than calculated balance (${formatCurrency(t.balance)})</p>`}}function closeModal(e){let t=$(`#${e}`);t&&(t.style.display="none"),"formModal"===e&&($("#dynamicForm").innerHTML="",$("#dynamicForm").onsubmit=null),"settingsModal"===e&&cancelDeleteAllData()}function openFormModal(e,t,a){$("#formModalTitle").textContent=e;let n=$("#dynamicForm");n.innerHTML=t,n.onsubmit=a,$("#formModal").style.display="block";let o=n.querySelector('input:not([type="hidden"]), select, textarea');o&&o.focus()}function openEditTransactionForm(e,t){openEditTransactionModal(e,t)}function openEditCcTransactionForm(e){openEditCcTransactionModal(e)}function handleBackupReminderDismiss(e){try{localStorage.setItem(e,getCurrentDateString()),console.log(`Backup reminder dismissed for key: ${e} on ${getCurrentDateString()}`)}catch(t){console.error("Error saving backup reminder dismissal state:",t)}closeModal("formModal")}function showBackupReminderPopup(e){let t=`
            <div class="text-center">
                <i class="fas fa-cloud-download-alt fa-3x text-info mb-4"></i>
                <p class="mb-6 text-gray-300">Friendly Reminder! It's a good day to consider backing up your expense data to keep it safe.</p>
                <div class="flex flex-col sm:flex-row justify-center gap-3">
                    <button type="button" id="backupNowBtnInModal" class="btn btn-primary flex-1">
                        <i class="fas fa-download mr-2"></i>Backup Now
                    </button>
                    <button type="button" id="backupLaterBtnInModal" class="btn btn-secondary flex-1">
                        I'll Do It Later
                    </button>
                </div>
            </div>
        `;openFormModal("Backup Reminder",t,null);let a=$("#backupNowBtnInModal"),n=$("#backupLaterBtnInModal");a&&(a.onclick=()=>{exportData(),handleBackupReminderDismiss(e)}),n&&(n.onclick=()=>{handleBackupReminderDismiss(e)})}function checkAndTriggerBackupReminder(){if(!state.settings.initialSetupDone&&0===state.transactions.length){console.log("Skipping backup reminder: Initial setup not done or no transactions.");return}let e=new Date,t=e.getDay(),a=getCurrentDateString(),n=null;if(0===t?n="lastReminderShownForSunday":3===t&&(n="lastReminderShownForWednesday"),n)try{let o=localStorage.getItem(n);o!==a?(console.log(`Time to show backup reminder for: ${n}. Last shown: ${o}, Current: ${a}`),showBackupReminderPopup(n)):console.log(`Backup reminder already shown for ${n} on ${a}`)}catch(i){console.error("Error checking backup reminder state from localStorage:",i)}}window.addEventListener("click",e=>{$$(".modal").forEach(t=>{e.target===t&&closeModal(t.id)})});let activeSettingsTab=null;const settingsTabsConfig=[{label:"Accounts",targetPanelId:"settingsAccountsPanel"},{label:"Credit Card",targetPanelId:"settingsCreditCardPanel"},{label:"Categories",targetPanelId:"settingsCategoriesPanel"},{label:"Data",targetPanelId:"settingsDataManagementPanel"}];function setupSettingsTabs(){let e=document.getElementById("settingsTabsContainer"),t=document.getElementById("settingsTabContent");if(!e||!t){console.error("Settings tab containers not found!");return}e.innerHTML="",activeSettingsTab=null,settingsTabsConfig.forEach((t,a)=>{let n=document.createElement("li"),o=document.createElement("button");if(o.className="settings-tab-button inline-block p-3 border-b-2 rounded-t-lg",o.textContent=t.label,o.dataset.tabTarget=`#${t.targetPanelId}`,o.addEventListener("click",()=>{switchSettingsTab(o,t.targetPanelId)}),n.appendChild(o),e.appendChild(n),0===a)switchSettingsTab(o,t.targetPanelId);else{let i=document.getElementById(t.targetPanelId);i&&i.classList.add("hidden")}})}function switchSettingsTab(e,t){let a=document.getElementById("settingsTabContent");if(!a)return;if(activeSettingsTab&&activeSettingsTab.button!==e){activeSettingsTab.button.classList.remove("active");let n=activeSettingsTab.button.dataset.tabTarget;if(n){let o=a.querySelector(n);o&&o.classList.add("hidden")}}e.classList.add("active");let i=document.getElementById(t);i?i.classList.remove("hidden"):console.warn(`Target panel with ID '${t}' not found.`),activeSettingsTab={button:e,panelId:t}}function initializeUI(e=!1){if(console.log("Initializing UI..."),e||loadData(),(!state.settings||void 0===state.settings.initialSetupDone||!1===state.settings.initialSetupDone)&&!e){console.log("Initial setup not done. Opening wizard."),openInitialSetupWizard();return}let t=$("#date");t&&(t.value=new Date().toISOString().split("T")[0]);let a=$("#ccDate");a&&(a.value=new Date().toISOString().split("T")[0]),populateDropdowns(),renderDashboard(),updateCcDashboardSectionVisibility(),setupMonthlyView(),window.deleteSliderInitialized||(setupDeleteSlider(),window.deleteSliderInitialized=!0),displayAppVersion(),$("#transactionForm").onsubmit=handleTransactionSubmit,$("#ccTransactionForm").onsubmit=handleCcTransactionSubmit,$("#transferForm").onsubmit=handleTransferSubmit,$("#settingsBtn").onclick=()=>{openSettingsModal()},$("#monthlyViewBtn").onclick=()=>{let e=$("#yearSelector");e&&e.value?renderMonthTabs(parseInt(e.value)):renderMonthTabs(new Date().getFullYear()),$("#monthlyViewModal").style.display="block";let t=new Date().getMonth(),a=e?parseInt(e.value):new Date().getFullYear(),n=$(`#monthTabs .tab-button[data-month="${t}"][data-year="${a}"]`);n?n.click():$$("#monthTabs .tab-button").length>0?$$("#monthTabs .tab-button")[0].click():$("#monthlyDetailsContainer").innerHTML='<p class="text-center text-gray-400">Select a month.</p>'},$("#exportDataBtn").onclick=exportData,$("#importDataInput").onchange=importData,$("#initiateDeleteBtn").onclick=initiateDeleteAllData,$("#cancelDeleteBtn").onclick=cancelDeleteAllData,$("#addDebtBtn").onclick=openAddDebtForm,$("#addReceivableBtn").onclick=openAddReceivableForm,$("#addInstallmentBtn").onclick=openAddInstallmentForm,$("#cashCounterBtn").onclick=openCashCounter,$("#ccHistoryBtn").onclick=openCcHistoryModal;let n=$("#transactionType"),o=$("#categoryGroup"),i=$("#description"),r=()=>{n&&o&&("income"===n.value?(o.style.display="none",$("#category").required=!1,i&&(i.placeholder="e.g., Monthly Salary")):(o.style.display="block",$("#category").required=!0,i&&(i.placeholder="e.g., Lunch, Groceries")))};n&&(n.onchange=r,r()),renderDebtList(),renderInstallmentList(),window.countdownInterval||(window.countdownInterval=setInterval(()=>{renderDebtList(),renderInstallmentList()},36e5)),window.backupReminderInterval||(checkAndTriggerBackupReminder(),window.backupReminderInterval=setInterval(checkAndTriggerBackupReminder,36e5),console.log("Backup reminder interval started."))}document.addEventListener("DOMContentLoaded",()=>{console.log("DOM Loaded. Initializing..."),loadData(),initializeUI();let e=document.getElementById("preloader"),t=document.getElementById("app-content");e&&t?(console.log("Preloader will be shown for 1.25 seconds."),setTimeout(()=>{console.log("Preloader timer finished. Hiding preloader, showing app content."),e.classList.add("hidden"),t.classList.add("visible"),setTimeout(()=>{e.style.display="none",console.log("Preloader display set to 'none' after fade-out.")},750)},1250)):(e||console.error("Preloader element with ID 'preloader' not found. Timer preloader cannot run."),t||console.error("App content element with ID 'app-content' not found. Timer preloader cannot run."),t&&(t.classList.add("visible"),console.warn("Attempted to show app content due to missing preloader elements.")),e&&(e.style.display="none"))});